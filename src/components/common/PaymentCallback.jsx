import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import {
  Box,
  Typography,
  CircularProgress,
  Paper,
  Button,
  Alert
} from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import api from '../../api/axios';

export default function PaymentCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState('processing'); // processing, success, failed
  const [message, setMessage] = useState('ƒêang x·ª≠ l√Ω thanh to√°n...');
  const [paymentInfo, setPaymentInfo] = useState(null);

  useEffect(() => {
    const processPaymentCallback = async () => {
      try {
        // L·∫•y c√°c tham s·ªë t·ª´ URL callback c·ªßa MoMo
        const orderId = searchParams.get('orderId');
        const resultCode = searchParams.get('resultCode');
        const amount = searchParams.get('amount');
        const orderInfo = searchParams.get('orderInfo');
        const payType = searchParams.get('payType');
        const transId = searchParams.get('transId');

        console.log('üéØ MoMo Callback Parameters:', {
          orderId,
          resultCode,
          amount,
          orderInfo,
          payType,
          transId
        });

        setPaymentInfo({
          orderId,
          resultCode,
          amount,
          orderInfo,
          payType,
          transId
        });

        if (resultCode === '0') {
          // Thanh to√°n th√†nh c√¥ng
          console.log('‚úÖ Payment successful!');
          
          // G·ªçi API backend ƒë·ªÉ x√°c nh·∫≠n thanh to√°n
          try {
            await api.post('/api/UserMembershipPayment/ConfirmPayment', {
              orderId,
              transId,
              amount,
              resultCode
            });
            
            setStatus('success');
            setMessage('Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.');
            
            // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß sau 3 gi√¢y
            setTimeout(() => {
              navigate('/dashboard');
            }, 3000);
            
          } catch (confirmError) {
            console.error('‚ùå Error confirming payment:', confirmError);
            setStatus('success');
            setMessage('Thanh to√°n th√†nh c√¥ng! Tuy nhi√™n c√≥ l·ªói x√°c nh·∫≠n, vui l√≤ng li√™n h·ªá h·ªó tr·ª£.');
          }
          
        } else {
          // Thanh to√°n th·∫•t b·∫°i
          console.log('‚ùå Payment failed with resultCode:', resultCode);
          setStatus('failed');
          
          // C√°c m√£ l·ªói ph·ªï bi·∫øn c·ªßa MoMo
          const errorMessages = {
            '1': 'Thanh to√°n th·∫•t b·∫°i do l·ªói h·ªá th·ªëng',
            '2': 'Giao d·ªãch b·ªã t·ª´ ch·ªëi b·ªüi nh√† ph√°t h√†nh th·∫ª',
            '7': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng t·∫°i MoMo, giao d·ªãch ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω',
            '9': 'Giao d·ªãch ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng nh∆∞ng b·ªã th·∫•t b·∫°i do l·ªói h·ªá th·ªëng',
            '10': 'Giao d·ªãch th·∫•t b·∫°i do t√†i kho·∫£n ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t',
            '11': 'Giao d·ªãch th·∫•t b·∫°i do t√†i kho·∫£n ng∆∞·ªùi d√πng b·ªã kh√≥a',
            '12': 'Giao d·ªãch th·∫•t b·∫°i do t√†i kho·∫£n ng∆∞·ªùi d√πng ch∆∞a ƒë·ªß s·ªë d∆∞',
            '13': 'Giao d·ªãch th·∫•t b·∫°i do sai th√¥ng tin x√°c th·ª±c',
            '20': 'Giao d·ªãch th·∫•t b·∫°i do kh√¥ng ƒë√∫ng OTP',
            '21': 'Giao d·ªãch th·∫•t b·∫°i do qu√° th·ªùi gian x√°c th·ª±c OTP'
          };
          
          setMessage(errorMessages[resultCode] || 'Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        
      } catch (error) {
        console.error('‚ùå Error processing payment callback:', error);
        setStatus('failed');
        setMessage('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.');
      }
    };

    processPaymentCallback();
  }, [searchParams, navigate]);

  const handleRetry = () => {
    navigate('/membership');
  };

  const handleGoHome = () => {
    navigate('/');
  };

  return (
    <Box sx={{ maxWidth: 500, mx: 'auto', mt: 5, mb: 5 }}>
      <Paper elevation={4} sx={{ p: 4, borderRadius: 4, textAlign: 'center' }}>
        {status === 'processing' && (
          <>
            <CircularProgress size={60} sx={{ mb: 3 }} />
            <Typography variant="h5" fontWeight={600} mb={2}>
              ƒêang x·ª≠ l√Ω thanh to√°n...
            </Typography>
            <Typography color="text.secondary">
              Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t
            </Typography>
          </>
        )}

        {status === 'success' && (
          <>
            <CheckCircleIcon sx={{ fontSize: 80, color: 'success.main', mb: 3 }} />
            <Typography variant="h5" fontWeight={600} mb={2} color="success.main">
              Thanh to√°n th√†nh c√¥ng!
            </Typography>
            <Alert severity="success" sx={{ mb: 3 }}>
              {message}
            </Alert>
            {paymentInfo && (
              <Box sx={{ textAlign: 'left', mb: 3 }}>
                <Typography variant="subtitle2" color="text.secondary">
                  Th√¥ng tin giao d·ªãch:
                </Typography>
                <Typography>M√£ ƒë∆°n h√†ng: <strong>{paymentInfo.orderId}</strong></Typography>
                <Typography>S·ªë ti·ªÅn: <strong>{parseInt(paymentInfo.amount || 0).toLocaleString()}ƒë</strong></Typography>
                <Typography>M√£ giao d·ªãch: <strong>{paymentInfo.transId}</strong></Typography>
              </Box>
            )}
            <Typography variant="body2" color="text.secondary" mb={3}>
              B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß trong gi√¢y l√°t...
            </Typography>
            <Button variant="contained" onClick={handleGoHome} fullWidth>
              V·ªÅ trang ch·ªß ngay
            </Button>
          </>
        )}

        {status === 'failed' && (
          <>
            <ErrorIcon sx={{ fontSize: 80, color: 'error.main', mb: 3 }} />
            <Typography variant="h5" fontWeight={600} mb={2} color="error.main">
              Thanh to√°n th·∫•t b·∫°i
            </Typography>
            <Alert severity="error" sx={{ mb: 3 }}>
              {message}
            </Alert>
            {paymentInfo && paymentInfo.resultCode && (
              <Typography variant="body2" color="text.secondary" mb={3}>
                M√£ l·ªói: {paymentInfo.resultCode}
              </Typography>
            )}
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Button variant="outlined" onClick={handleGoHome} fullWidth>
                V·ªÅ trang ch·ªß
              </Button>
              <Button variant="contained" onClick={handleRetry} fullWidth>
                Th·ª≠ l·∫°i
              </Button>
            </Box>
          </>
        )}
      </Paper>
    </Box>
  );
}
