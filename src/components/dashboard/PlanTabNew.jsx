import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import api from '../../api/axios';
import '../../css/Dashboard.css';
import '../../css/PlanTabNew.css';

const PlanTabNew = () => {
  const [plan, setPlan] = useState(null);
  const [weeklyPlans, setWeeklyPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [personalGoals, setPersonalGoals] = useState([
    "C·∫£ ng√†y kh√¥ng h√∫t thu·ªëc",
    "TƒÉng ki·ªÉm so√°t th√≥i quen",
    "L√¢m g∆∞∆°ng c·ªët cho con c√°i",
    "TƒÉng c∆∞·ªùng th·ªÉ l·ª±c"
  ]);
  
  const [rewardSystem, setRewardSystem] = useState([
    { period: "1 tu·∫ßn", description: "Mua m·ªôt b·∫£n s√°ch y√™u th√≠ch" },
    { period: "1 th√°ng", description: "ƒêi xem phim c√πng gia ƒë√¨nh" },
    { period: "3 th√°ng", description: "Mua m·ªôt m√≥n ƒë·ªì mong mu·ªën" },
    { period: "6 th√°ng", description: "ƒêi du l·ªãch ng·∫Øn h·∫°n" }
  ]);

  // Form data for creating new plan
  const [formData, setFormData] = useState({
    totalWeeks: 4,
    startDate: new Date().toISOString().split('T')[0],
    weeklyReductions: [],
    personalMotivation: ''
  });

  // Form data for editing existing plan
  const [editFormData, setEditFormData] = useState({
    personalMotivation: '',
    targetQuitDate: '',
    weeklyReductions: []
  });

  useEffect(() => {
    fetchCurrentPlan();
  }, []);

  const fetchCurrentPlan = async () => {
    try {
      setLoading(true);
      const response = await api.get('/GoalPlan/current-goal');
      if (response.data) {
        setPlan(response.data);
        // If plan exists, fetch weekly reduction plans and populate edit form
        fetchWeeklyPlans(response.data.id);
        populateEditForm(response.data);
      }
    } catch (error) {
      console.error('Error fetching current plan:', error);
      if (error.response?.status !== 404) {
        toast.error('Kh√¥ng th·ªÉ t·∫£i k·∫ø ho·∫°ch hi·ªán t·∫°i');
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchWeeklyPlans = async (planId) => {
    try {
      const response = await api.get(`/GoalPlanWeeklyReduction/plan/${planId}`);
      setWeeklyPlans(response.data || []);
    } catch (error) {
      console.error('Error fetching weekly plans:', error);
    }
  };

  const populateEditForm = (planData) => {
    setEditFormData({
      personalMotivation: planData.personalMotivation || planData.PersonalMotivation || '',
      targetQuitDate: (planData.targetQuitDate || planData.TargetQuitDate)?.split('T')[0] || '',
      weeklyReductions: []
    });
  };

  // Initialize edit form with weekly plans when they are loaded
  useEffect(() => {
    if (weeklyPlans.length > 0 && plan) {
      const weeklyReductions = weeklyPlans.map(week => ({
        reduction: week.targetReduction
      }));
      setEditFormData(prev => ({
        ...prev,
        weeklyReductions
      }));
    }
  }, [weeklyPlans, plan]);

  const handleEditPlan = () => {
    setShowEditForm(true);
    setShowCreateForm(false);
    if (plan) {
      populateEditForm(plan);
    }
  };

  const updateExistingPlan = async () => {
    try {
      // Update main plan
      const planData = {
        personalMotivation: editFormData.personalMotivation,
        targetQuitDate: editFormData.targetQuitDate,
        isCurrentGoal: true
      };

      await api.put(`/GoalPlan/${plan.id}`, planData);

      // Update weekly reduction plans if any changes
      if (editFormData.weeklyReductions.length > 0) {
        const updatePromises = editFormData.weeklyReductions.map((week, index) => {
          const existingWeek = weeklyPlans[index];
          if (existingWeek) {
            return api.put(`/GoalPlanWeeklyReduction/${existingWeek.id}`, {
              ...existingWeek,
              targetReduction: week.reduction
            });
          }
        });
        
        await Promise.all(updatePromises.filter(Boolean));
      }
      
      toast.success('C·∫≠p nh·∫≠t k·∫ø ho·∫°ch th√†nh c√¥ng!');
      setShowEditForm(false);
      await fetchCurrentPlan();
    } catch (error) {
      console.error('Error updating plan:', error);
      toast.error('C·∫≠p nh·∫≠t k·∫ø ho·∫°ch th·∫•t b·∫°i!');
    }
  };

  const createNewPlan = async () => {
    try {
      // First create the main plan
      const planData = {
        startDate: formData.startDate,
        targetQuitDate: calculateEndDate(formData.startDate, formData.totalWeeks),
        personalMotivation: formData.personalMotivation || "V√¨ s·ª©c kh·ªèe v√† t∆∞∆°ng lai t·ªët ƒë·∫πp",
        isCurrentGoal: true
      };

      const planResponse = await api.post('/GoalPlan', planData);
      const createdPlan = planResponse.data;

      // Then create weekly reduction plans
      const weeklyPlansPromises = formData.weeklyReductions.map((week, index) => {
        const weekStart = new Date(formData.startDate);
        weekStart.setDate(weekStart.getDate() + (index * 7));
        
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekEnd.getDate() + 6);

        return api.post('/GoalPlanWeeklyReduction', {
          goalPlanId: createdPlan.id,
          weekNumber: index + 1,
          targetReduction: week.reduction,
          weekStartDate: weekStart.toISOString().split('T')[0],
          weekEndDate: weekEnd.toISOString().split('T')[0]
        });
      });

      await Promise.all(weeklyPlansPromises);
      
      toast.success('T·∫°o k·∫ø ho·∫°ch th√†nh c√¥ng!');
      setShowCreateForm(false);
      await fetchCurrentPlan();
    } catch (error) {
      console.error('Error creating plan:', error);
      toast.error('T·∫°o k·∫ø ho·∫°ch th·∫•t b·∫°i!');
    }
  };

  const calculateEndDate = (startDate, weeks) => {
    const end = new Date(startDate);
    end.setDate(end.getDate() + (weeks * 7));
    return end.toISOString().split('T')[0];
  };

  const handleWeeklyReductionChange = (weekIndex, value) => {
    const newReductions = [...formData.weeklyReductions];
    newReductions[weekIndex] = { ...newReductions[weekIndex], reduction: parseInt(value) || 0 };
    setFormData(prev => ({ ...prev, weeklyReductions: newReductions }));
  };

  const handleEditWeeklyReductionChange = (weekIndex, value) => {
    const newReductions = [...editFormData.weeklyReductions];
    if (!newReductions[weekIndex]) {
      newReductions[weekIndex] = {};
    }
    newReductions[weekIndex] = { ...newReductions[weekIndex], reduction: parseInt(value) || 0 };
    setEditFormData(prev => ({ ...prev, weeklyReductions: newReductions }));
  };

  const initializeWeeklyReductions = (weeks) => {
    const reductions = [];
    for (let i = 0; i < weeks; i++) {
      reductions.push({ reduction: Math.max(1, 10 - (i * 2)) }); // Gi·∫£m d·∫ßn t·ª´ 10 v·ªÅ 1
    }
    setFormData(prev => ({ ...prev, weeklyReductions: reductions }));
  };

  useEffect(() => {
    if (formData.totalWeeks > 0) {
      initializeWeeklyReductions(formData.totalWeeks);
    }
  }, [formData.totalWeeks]);

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ minHeight: "300px" }}>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">ƒêang t·∫£i...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="plan-tab-container">
      {!plan && !showCreateForm && (
        <div className="no-plan-state">
          <div className="success-banner">
            <div className="success-content">
              <div className="checkmark">‚úì</div>
              <div>
                <h3>K·∫ø ho·∫°ch cai thu·ªëc c·ªßa b·∫°n ƒë√£ s·∫µn s√°ng!</h3>
                <p>K·∫ø ho·∫°ch ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát d·ª±a tr√™n th√¥ng tin v√† m·ª•c ti√™u c·ªßa b·∫°n</p>
              </div>
            </div>
          </div>

          <div className="stats-row">
            <div className="stat-item">
              <div className="stat-icon green">‚úì</div>
              <div className="stat-info">
                <h4>Ng√†y b·∫Øt ƒë·∫ßu</h4>
                <p>1/8/2025</p>
              </div>
            </div>
            <div className="stat-item">
              <div className="stat-icon blue">üìä</div>
              <div className="stat-info">
                <h4>M·ª•c ti√™u ho√†n th√†nh</h4>
                <p>26/9/2025</p>
              </div>
            </div>
            <div className="stat-item">
              <div className="stat-icon purple">‚è∞</div>
              <div className="stat-info">
                <h4>Th·ªõi gian d·ª± ki·∫øn</h4>
                <p>56 ng√†y</p>
              </div>
            </div>
          </div>

          <div className="content-sections">
            <div className="left-section">
              <div className="goals-section">
                <h3>C√°c m·ª•c ti√™u quan tr·ªçng</h3>
                <div className="goals-list">
                  {personalGoals.map((goal, index) => (
                    <div key={index} className="goal-item">
                      <span className="goal-number">{index + 1}</span>
                      <div className="goal-content">
                        <span>Tu·∫ßn {index + 1}</span>
                        <p>Gi·∫£m xu·ªëng {13 - (index * 3)} ƒëi·∫øu/ng√†y</p>
                        <div className="progress-bar">
                          <div className="progress-fill" style={{width: `${13 + (index * 10)}%`}}></div>
                        </div>
                        <span className="progress-text">{13 + (index * 10)}%</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="right-section">
              <div className="goals-section">
                <h3>M·ª•c ti√™u c√° nh√¢n</h3>
                <div className="personal-goals">
                  <ul>
                    <li>C·∫£ ng√†y kh√¥ng h√∫t thu·ªëc v√† h·ªó tr·ª£</li>
                    <li>TƒÉng ki·ªÉm so√°t th√≥i quen cho gia ƒë√¨nh</li>
                    <li>L√†m g∆∞∆°ng t·ªët cho con c√°i</li>
                    <li>TƒÉng c∆∞·ªùng th·ªÉ l·ª±c</li>
                  </ul>
                </div>
              </div>

              <div className="reward-section">
                <h3>H·ªá th·ªëng ph·∫ßn th∆∞·ªüng</h3>
                <div className="rewards-list">
                  {rewardSystem.map((reward, index) => (
                    <div key={index} className="reward-item">
                      <div className="reward-badge">{index + 1}</div>
                      <div className="reward-info">
                        <span className="reward-period">{reward.period}</span>
                        <p>{reward.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div className="action-section">
            <div className="emergency-alert">
              <div className="alert-icon">‚ö†Ô∏è</div>
              <div className="alert-content">
                <h4>K·∫ø ho·∫°ch kh·∫©n c·∫•p</h4>
                <p>Khi c·∫£m th·∫•y kh√≥ khƒÉn ho·∫∑c c∆°n th√®m thu·ªëc - t·ªët h·ªó tr·ª£ d√†i h·∫°n v√† nh·ªØng l·ªùi khuy√™n. T·∫≠p th·ªÉ d·ª•c ho·∫∑c g·ªçi ƒëi·ªán cho ng∆∞·ªùi th√¢n. T·∫°o ra c√°ch l√†m cho c√≥ th·ªÉ b√¨nh tƒ©nh</p>
              </div>
            </div>

            <div className="action-buttons">
              <button 
                className="btn btn-primary btn-create-plan"
                onClick={() => setShowCreateForm(true)}
              >
                B·∫Øt ƒë·∫ßu t·∫°o k·∫ø ho·∫°ch
              </button>
              <button 
                className="btn btn-outline-primary"
                onClick={() => setShowCreateForm(true)}
              >
                T√πy ch·ªânh k·∫ø ho·∫°ch
              </button>
              <button className="btn btn-outline-secondary">
                T·∫£i xu·ªëng PDF
              </button>
            </div>
          </div>
        </div>
      )}

      {showCreateForm && (
        <div className="create-plan-form">
          <div className="form-header">
            <h3>T·∫°o k·∫ø ho·∫°ch cai thu·ªëc m·ªõi</h3>
            <button 
              className="btn btn-outline-secondary"
              onClick={() => setShowCreateForm(false)}
            >
              Quay l·∫°i
            </button>
          </div>

          <div className="form-content">
            <div className="form-group">
              <label>ƒê·ªông l·ª±c c√° nh√¢n:</label>
              <textarea
                value={formData.personalMotivation}
                onChange={(e) => setFormData(prev => ({ ...prev, personalMotivation: e.target.value }))}
                className="form-control"
                placeholder="Nh·∫≠p ƒë·ªông l·ª±c c√° nh√¢n c·ªßa b·∫°n..."
                rows="3"
              />
            </div>

            <div className="form-group">
              <label>S·ªë tu·∫ßn th·ª±c hi·ªán:</label>
              <input
                type="number"
                min="2"
                max="12"
                value={formData.totalWeeks}
                onChange={(e) => setFormData(prev => ({ ...prev, totalWeeks: parseInt(e.target.value) || 4 }))}
                className="form-control"
              />
            </div>

            <div className="form-group">
              <label>Ng√†y b·∫Øt ƒë·∫ßu:</label>
              <input
                type="date"
                value={formData.startDate}
                onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
                className="form-control"
              />
            </div>

            <div className="weekly-plans">
              <h4>K·∫ø ho·∫°ch gi·∫£m theo tu·∫ßn:</h4>
              {formData.weeklyReductions.map((week, index) => (
                <div key={index} className="week-plan">
                  <label>Tu·∫ßn {index + 1} - S·ªë ƒëi·∫øu thu·ªëc gi·∫£m:</label>
                  <input
                    type="number"
                    min="0"
                    max="50"
                    value={week.reduction}
                    onChange={(e) => handleWeeklyReductionChange(index, e.target.value)}
                    className="form-control"
                  />
                  <small className="form-text text-muted">
                    T·ª´ {new Date(new Date(formData.startDate).getTime() + (index * 7 * 24 * 60 * 60 * 1000)).toLocaleDateString('vi-VN')} 
                    {' - '} 
                    {new Date(new Date(formData.startDate).getTime() + ((index + 1) * 7 - 1) * 24 * 60 * 60 * 1000).toLocaleDateString('vi-VN')}
                  </small>
                </div>
              ))}
            </div>

            <div className="form-actions">
              <button 
                className="btn btn-primary"
                onClick={createNewPlan}
              >
                T·∫°o k·∫ø ho·∫°ch
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => setShowCreateForm(false)}
              >
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {showEditForm && plan && (
        <div className="create-plan-form">
          <div className="form-header">
            <h3>Ch·ªânh s·ª≠a k·∫ø ho·∫°ch</h3>
            <button 
              className="btn btn-outline-secondary"
              onClick={() => setShowEditForm(false)}
            >
              Quay l·∫°i
            </button>
          </div>

          <div className="form-content">
            <div className="form-group">
              <label>ƒê·ªông l·ª±c c√° nh√¢n:</label>
              <textarea
                value={editFormData.personalMotivation}
                onChange={(e) => setEditFormData(prev => ({ ...prev, personalMotivation: e.target.value }))}
                className="form-control"
                placeholder="Nh·∫≠p ƒë·ªông l·ª±c c√° nh√¢n c·ªßa b·∫°n..."
                rows="3"
              />
            </div>

            <div className="form-group">
              <label>Ng√†y m·ª•c ti√™u ho√†n th√†nh:</label>
              <input
                type="date"
                value={editFormData.targetQuitDate}
                onChange={(e) => setEditFormData(prev => ({ ...prev, targetQuitDate: e.target.value }))}
                className="form-control"
              />
            </div>

            {weeklyPlans.length > 0 && (
              <div className="weekly-plans">
                <h4>Ch·ªânh s·ª≠a k·∫ø ho·∫°ch theo tu·∫ßn:</h4>
                {weeklyPlans.map((week, index) => (
                  <div key={index} className="week-plan">
                    <label>Tu·∫ßn {week.weekNumber} - S·ªë ƒëi·∫øu thu·ªëc gi·∫£m:</label>
                    <input
                      type="number"
                      min="0"
                      max="50"
                      defaultValue={week.targetReduction}
                      onChange={(e) => handleEditWeeklyReductionChange(index, e.target.value)}
                      className="form-control"
                    />
                    <small className="form-text text-muted">
                      T·ª´ {new Date(week.weekStartDate).toLocaleDateString('vi-VN')} - {new Date(week.weekEndDate).toLocaleDateString('vi-VN')}
                    </small>
                  </div>
                ))}
              </div>
            )}

            <div className="form-actions">
              <button 
                className="btn btn-primary"
                onClick={updateExistingPlan}
              >
                C·∫≠p nh·∫≠t k·∫ø ho·∫°ch
              </button>
              <button 
                className="btn btn-secondary"
                onClick={() => setShowEditForm(false)}
              >
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {plan && (
        <div className="existing-plan">
          <div className="plan-header">
            <h3>K·∫ø ho·∫°ch hi·ªán t·∫°i</h3>
            <div className="plan-status">
              <span className="status-badge active">ƒêang ho·∫°t ƒë·ªông</span>
            </div>
          </div>

          <div className="plan-overview">
            <div className="plan-dates">
              <div className="date-item">
                <strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong> {new Date(plan.startDate || plan.StartDate).toLocaleDateString('vi-VN')}
              </div>
              <div className="date-item">
                <strong>Ng√†y m·ª•c ti√™u:</strong> {new Date(plan.targetQuitDate || plan.TargetQuitDate).toLocaleDateString('vi-VN')}
              </div>
            </div>
            
            <div className="plan-motivation">
              <strong>ƒê·ªông l·ª±c:</strong> {plan.personalMotivation || plan.PersonalMotivation}
            </div>
          </div>

          {weeklyPlans.length > 0 && (
            <div className="weekly-plans-display">
              <h4>K·∫ø ho·∫°ch theo tu·∫ßn:</h4>
              <div className="weeks-grid">
                {weeklyPlans.map((week, index) => (
                  <div key={index} className="week-card">
                    <div className="week-header">
                      <h5>Tu·∫ßn {week.weekNumber}</h5>
                      <span className="reduction-target">{week.targetReduction} ƒëi·∫øu gi·∫£m</span>
                    </div>
                    <div className="week-dates">
                      {new Date(week.weekStartDate).toLocaleDateString('vi-VN')} - {new Date(week.weekEndDate).toLocaleDateString('vi-VN')}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="plan-actions">
            <button 
              className="btn btn-primary me-2"
              onClick={handleEditPlan}
            >
              <i className="fas fa-edit me-1"></i>
              Ch·ªânh s·ª≠a k·∫ø ho·∫°ch
            </button>
            <button 
              className="btn btn-warning"
              onClick={() => setShowCreateForm(true)}
            >
              T·∫°o k·∫ø ho·∫°ch m·ªõi
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PlanTabNew;
