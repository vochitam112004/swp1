import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Button, 
  TextField,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Card,
  CardContent,
  CardActions,
  Chip,
  LinearProgress
} from '@mui/material';
import { 
  PlayArrow as PlayIcon,
  Pause as PauseIcon,
  Stop as StopIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Timer as TimerIcon,
  CheckCircle as CheckIcon
} from '@mui/icons-material';
import { toast } from 'react-toastify';

const TRIGGER_TYPES = [
  'Stress', 'C√† ph√™', 'R∆∞·ª£u bia', 'Sau ƒÉn', 'L√°i xe', 
  'C√¥ng vi·ªác', 'B·∫°n b√® h√∫t thu·ªëc', 'C√¥ ƒë∆°n', 'Bu·ªìn ch√°n', 'Gi·∫≠n d·ªØ'
];

const COPING_STRATEGIES = {
  'Stress': [
    { name: 'Th·ªü s√¢u 4-7-8', duration: 5, description: 'H√≠t v√†o 4s, gi·ªØ 7s, th·ªü ra 8s' },
    { name: 'Thi·ªÅn ch√°nh ni·ªám', duration: 10, description: 'T·∫≠p trung v√†o h∆°i th·ªü v√† c·∫£m nh·∫≠n hi·ªán t·∫°i' },
    { name: 'ƒêi b·ªô th∆∞ gi√£n', duration: 15, description: 'ƒêi b·ªô ch·∫≠m v√† quan s√°t xung quanh' },
    { name: 'Nghe nh·∫°c th∆∞ gi√£n', duration: 20, description: 'Nghe nh·∫°c c·ªï ƒëi·ªÉn ho·∫∑c thi√™n nhi√™n' }
  ],
  'C√† ph√™': [
    { name: 'Thay th·∫ø ƒë·ªì u·ªëng', duration: 2, description: 'U·ªëng tr√† th·∫£o m·ªôc thay c√† ph√™' },
    { name: 'Nhai k·∫πo cao su', duration: 5, description: 'Nhai k·∫πo kh√¥ng ƒë∆∞·ªùng' },
    { name: 'S√∫c mi·ªáng', duration: 3, description: 'S√∫c mi·ªáng v·ªõi n∆∞·ªõc l·∫°nh' },
    { name: 'ƒÇn k·∫πo b·∫°c h√†', duration: 5, description: 'ƒÇn k·∫πo b·∫°c h√† ƒë·ªÉ l√†m m·ªõi mi·ªáng' }
  ],
  'Sau ƒÉn': [
    { name: 'ƒê√°nh rƒÉng ngay', duration: 3, description: 'ƒê√°nh rƒÉng v√† s√∫c mi·ªáng' },
    { name: 'U·ªëng n∆∞·ªõc ·∫•m', duration: 5, description: 'U·ªëng m·ªôt c·ªëc n∆∞·ªõc ·∫•m' },
    { name: 'ƒêi b·ªô nh·∫π', duration: 10, description: 'ƒêi b·ªô 5-10 ph√∫t sau ƒÉn' },
    { name: 'Nhai k·∫πo cao su', duration: 10, description: 'Nhai k·∫πo kh√¥ng ƒë∆∞·ªùng' }
  ],
  'Bu·ªìn ch√°n': [
    { name: 'ƒê·ªçc s√°ch', duration: 30, description: 'ƒê·ªçc v√†i trang s√°ch y√™u th√≠ch' },
    { name: 'G·ªçi ƒëi·ªán b·∫°n b√®', duration: 15, description: 'Tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi th√¢n' },
    { name: 'Nghe podcast', duration: 20, description: 'Nghe podcast gi√°o d·ª•c ho·∫∑c gi·∫£i tr√≠' },
    { name: 'L√†m puzzle', duration: 25, description: 'Gi·∫£i sudoku ho·∫∑c crossword' }
  ],
  'default': [
    { name: 'Th·ªü s√¢u', duration: 5, description: 'Th·ª±c hi·ªán b√†i t·∫≠p th·ªü s√¢u' },
    { name: 'U·ªëng n∆∞·ªõc', duration: 2, description: 'U·ªëng m·ªôt c·ªëc n∆∞·ªõc l·∫°nh' },
    { name: 'Chuy·ªÉn h∆∞·ªõng ch√∫ √Ω', duration: 10, description: 'T·∫≠p trung v√†o vi·ªác kh√°c' },
    { name: 'Nh·∫Øc nh·ªü l√Ω do', duration: 3, description: 'Nh·ªõ l·∫°i l√Ω do cai thu·ªëc' }
  ]
};

export default function CopingStrategies() {
  const [activeStrategy, setActiveStrategy] = useState(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [completedStrategies, setCompletedStrategies] = useState(() => {
    const saved = localStorage.getItem('completedCopingStrategies');
    return saved ? JSON.parse(saved) : [];
  });
  
  const [customStrategies, setCustomStrategies] = useState(() => {
    const saved = localStorage.getItem('customCopingStrategies');
    return saved ? JSON.parse(saved) : [];
  });

  const [openDialog, setOpenDialog] = useState(false);
  const [newStrategy, setNewStrategy] = useState({
    name: '',
    duration: 5,
    description: '',
    trigger: 'default'
  });

  const [selectedTrigger, setSelectedTrigger] = useState('default');
  const [strategyStats, setStrategyStats] = useState(() => {
    const saved = localStorage.getItem('copingStrategyStats');
    return saved ? JSON.parse(saved) : {};
  });

  useEffect(() => {
    localStorage.setItem('completedCopingStrategies', JSON.stringify(completedStrategies));
  }, [completedStrategies]);

  useEffect(() => {
    localStorage.setItem('customCopingStrategies', JSON.stringify(customStrategies));
  }, [customStrategies]);

  useEffect(() => {
    localStorage.setItem('copingStrategyStats', JSON.stringify(strategyStats));
  }, [strategyStats]);

  // Timer effect
  useEffect(() => {
    let interval = null;
    if (isRunning && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft => timeLeft - 1);
      }, 1000);
    } else if (timeLeft === 0 && isRunning) {
      setIsRunning(false);
      if (activeStrategy) {
        handleStrategyComplete(activeStrategy);
      }
    }
    return () => clearInterval(interval);
  }, [isRunning, timeLeft, activeStrategy]);

  const startStrategy = (strategy) => {
    setActiveStrategy(strategy);
    setTimeLeft(strategy.duration * 60); // Convert minutes to seconds
    setIsRunning(true);
    toast.info(`B·∫Øt ƒë·∫ßu: ${strategy.name}`);
  };

  const pauseStrategy = () => {
    setIsRunning(false);
    toast.info('ƒê√£ t·∫°m d·ª´ng');
  };

  const resumeStrategy = () => {
    setIsRunning(true);
    toast.info('Ti·∫øp t·ª•c');
  };

  const stopStrategy = () => {
    setIsRunning(false);
    setActiveStrategy(null);
    setTimeLeft(0);
    toast.info('ƒê√£ d·ª´ng');
  };

  const handleStrategyComplete = (strategy) => {
    const completion = {
      id: Date.now(),
      strategyName: strategy.name,
      trigger: selectedTrigger,
      completedAt: new Date().toISOString(),
      duration: strategy.duration
    };
    
    setCompletedStrategies(prev => [completion, ...prev.slice(0, 49)]); // Keep last 50
    
    // Update stats
    const statKey = strategy.name;
    setStrategyStats(prev => ({
      ...prev,
      [statKey]: {
        count: (prev[statKey]?.count || 0) + 1,
        totalDuration: (prev[statKey]?.totalDuration || 0) + strategy.duration
      }
    }));

    toast.success(`Ho√†n th√†nh: ${strategy.name}! üéâ`);
    setActiveStrategy(null);
    setTimeLeft(0);
  };

  const addCustomStrategy = () => {
    if (!newStrategy.name.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p t√™n chi·∫øn l∆∞·ª£c!');
      return;
    }

    const strategy = {
      ...newStrategy,
      id: Date.now(),
      isCustom: true
    };

    setCustomStrategies(prev => [...prev, strategy]);
    setNewStrategy({
      name: '',
      duration: 5,
      description: '',
      trigger: 'default'
    });
    setOpenDialog(false);
    toast.success('ƒê√£ th√™m chi·∫øn l∆∞·ª£c m·ªõi!');
  };

  const deleteCustomStrategy = (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chi·∫øn l∆∞·ª£c n√†y?')) {
      setCustomStrategies(prev => prev.filter(s => s.id !== id));
      toast.success('ƒê√£ x√≥a chi·∫øn l∆∞·ª£c!');
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getStrategiesForTrigger = (trigger) => {
    const defaultStrategies = COPING_STRATEGIES[trigger] || COPING_STRATEGIES.default;
    const customStrategiesForTrigger = customStrategies.filter(s => s.trigger === trigger);
    return [...defaultStrategies, ...customStrategiesForTrigger];
  };

  const getTopStrategies = () => {
    return Object.entries(strategyStats)
      .sort(([,a], [,b]) => b.count - a.count)
      .slice(0, 5)
      .map(([name, stats]) => ({ name, ...stats }));
  };

  const getRecentCompletions = () => {
    return completedStrategies.slice(0, 5);
  };

  const getTotalCompletions = () => {
    return completedStrategies.length;
  };

  const getTotalTime = () => {
    return completedStrategies.reduce((total, completion) => total + completion.duration, 0);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" gutterBottom fontWeight="bold">
        Chi·∫øn l∆∞·ª£c ƒë·ªëi ph√≥ v·ªõi c∆°n th√®m thu·ªëc
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Luy·ªán t·∫≠p c√°c k·ªπ thu·∫≠t ƒë·ªëi ph√≥ hi·ªáu qu·∫£ ƒë·ªÉ v∆∞·ª£t qua c∆°n th√®m thu·ªëc v√† trigger.
      </Typography>

      <Grid container spacing={3}>
        {/* Stats Cards */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h4" color="primary" fontWeight="bold">
                {getTotalCompletions()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                L·∫ßn th·ª±c h√†nh
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={4}>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h4" color="success.main" fontWeight="bold">
                {getTotalTime()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Ph√∫t luy·ªán t·∫≠p
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={4}>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {Object.keys(strategyStats).length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Chi·∫øn l∆∞·ª£c ƒë√£ th·ª≠
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        {/* Active Strategy Timer */}
        {activeStrategy && (
          <Grid item xs={12}>
            <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'primary.main', color: 'white' }}>
              <Typography variant="h6" gutterBottom>
                ƒêang th·ª±c hi·ªán: {activeStrategy.name}
              </Typography>
              <Typography variant="h3" sx={{ my: 2 }}>
                {formatTime(timeLeft)}
              </Typography>
              <Typography variant="body1" sx={{ mb: 2 }}>
                {activeStrategy.description}
              </Typography>
              <LinearProgress 
                variant="determinate" 
                value={((activeStrategy.duration * 60 - timeLeft) / (activeStrategy.duration * 60)) * 100}
                sx={{ mb: 2, bgcolor: 'primary.light', '& .MuiLinearProgress-bar': { bgcolor: 'white' } }}
              />
              <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>
                {isRunning ? (
                  <Button variant="contained" color="warning" onClick={pauseStrategy} startIcon={<PauseIcon />}>
                    T·∫°m d·ª´ng
                  </Button>
                ) : (
                  <Button variant="contained" color="success" onClick={resumeStrategy} startIcon={<PlayIcon />}>
                    Ti·∫øp t·ª•c
                  </Button>
                )}
                <Button variant="outlined" onClick={stopStrategy} startIcon={<StopIcon />} sx={{ color: 'white', borderColor: 'white' }}>
                  D·ª´ng
                </Button>
                <Button variant="outlined" onClick={() => handleStrategyComplete(activeStrategy)} startIcon={<CheckIcon />} sx={{ color: 'white', borderColor: 'white' }}>
                  Ho√†n th√†nh
                </Button>
              </Box>
            </Paper>
          </Grid>
        )}

        {/* Trigger Selection */}
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Ch·ªçn trigger v√† chi·∫øn l∆∞·ª£c
            </Typography>
            
            <FormControl sx={{ mb: 2, minWidth: 200 }}>
              <InputLabel>Ch·ªçn trigger</InputLabel>
              <Select
                value={selectedTrigger}
                label="Ch·ªçn trigger"
                onChange={(e) => setSelectedTrigger(e.target.value)}
              >
                <MenuItem value="default">Chung</MenuItem>
                {TRIGGER_TYPES.map(trigger => (
                  <MenuItem key={trigger} value={trigger}>{trigger}</MenuItem>
                ))}
              </Select>
            </FormControl>

            <Button 
              variant="outlined" 
              onClick={() => setOpenDialog(true)}
              sx={{ ml: 2, mb: 2 }}
            >
              + Th√™m chi·∫øn l∆∞·ª£c t√πy ch·ªânh
            </Button>

            <Grid container spacing={2}>
              {getStrategiesForTrigger(selectedTrigger).map((strategy, index) => (
                <Grid item xs={12} sm={6} key={strategy.id || index}>
                  <Card sx={{ height: '100%' }}>
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', mb: 1 }}>
                        <Typography variant="h6" component="div">
                          {strategy.name}
                        </Typography>
                        <Chip 
                          label={`${strategy.duration} ph√∫t`} 
                          size="small" 
                          icon={<TimerIcon />}
                        />
                      </Box>
                      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                        {strategy.description}
                      </Typography>
                      {strategyStats[strategy.name] && (
                        <Typography variant="caption" color="text.secondary">
                          ƒê√£ th·ª±c hi·ªán {strategyStats[strategy.name].count} l·∫ßn
                        </Typography>
                      )}
                    </CardContent>
                    <CardActions>
                      <Button 
                        size="small" 
                        variant="contained"
                        onClick={() => startStrategy(strategy)}
                        disabled={activeStrategy !== null}
                        startIcon={<PlayIcon />}
                      >
                        B·∫Øt ƒë·∫ßu
                      </Button>
                      {strategy.isCustom && (
                        <IconButton 
                          size="small" 
                          onClick={() => deleteCustomStrategy(strategy.id)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      )}
                    </CardActions>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Paper>
        </Grid>

        {/* Statistics and History */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ p: 2, mb: 2 }}>
            <Typography variant="h6" gutterBottom>
              Top chi·∫øn l∆∞·ª£c
            </Typography>
            {getTopStrategies().length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™.</Alert>
            ) : (
              <List dense>
                {getTopStrategies().map((strategy, index) => (
                  <ListItem key={strategy.name} sx={{ px: 0 }}>
                    <ListItemText
                      primary={strategy.name}
                      secondary={`${strategy.count} l·∫ßn, ${strategy.totalDuration} ph√∫t`}
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Paper>

          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              L·ªãch s·ª≠ g·∫ßn ƒë√¢y
            </Typography>
            {getRecentCompletions().length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ l·ªãch s·ª≠ th·ª±c h√†nh.</Alert>
            ) : (
              <List dense>
                {getRecentCompletions().map((completion) => (
                  <ListItem key={completion.id} sx={{ px: 0 }}>
                    <ListItemIcon>
                      <CheckIcon color="success" />
                    </ListItemIcon>
                    <ListItemText
                      primary={completion.strategyName}
                      secondary={new Date(completion.completedAt).toLocaleString('vi-VN')}
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Paper>
        </Grid>
      </Grid>

      {/* Add Custom Strategy Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Th√™m chi·∫øn l∆∞·ª£c t√πy ch·ªânh</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="T√™n chi·∫øn l∆∞·ª£c"
                value={newStrategy.name}
                onChange={(e) => setNewStrategy(prev => ({ ...prev, name: e.target.value }))}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={3}
                label="M√¥ t·∫£"
                value={newStrategy.description}
                onChange={(e) => setNewStrategy(prev => ({ ...prev, description: e.target.value }))}
              />
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                type="number"
                label="Th·ªùi gian (ph√∫t)"
                value={newStrategy.duration}
                onChange={(e) => setNewStrategy(prev => ({ ...prev, duration: parseInt(e.target.value) || 5 }))}
                inputProps={{ min: 1, max: 60 }}
              />
            </Grid>

            <Grid item xs={6}>
              <FormControl fullWidth>
                <InputLabel>Trigger ph√π h·ª£p</InputLabel>
                <Select
                  value={newStrategy.trigger}
                  label="Trigger ph√π h·ª£p"
                  onChange={(e) => setNewStrategy(prev => ({ ...prev, trigger: e.target.value }))}
                >
                  <MenuItem value="default">Chung</MenuItem>
                  {TRIGGER_TYPES.map(trigger => (
                    <MenuItem key={trigger} value={trigger}>{trigger}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>H·ªßy</Button>
          <Button onClick={addCustomStrategy} variant="contained">Th√™m</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
