import React, { useEffect, useState } from 'react';
import { toast } from 'react-toastify';

const samplePlan = {
  reason: 'B·∫£o v·ªá s·ª©c kh·ªèe, ti·∫øt ki·ªám chi ph√≠, l√†m g∆∞∆°ng cho con c√°i',
  stages: '1. Gi·∫£m d·∫ßn s·ªë l∆∞·ª£ng thu·ªëc m·ªói ng√†y\n2. ƒê·∫∑t ng√†y cai ho√†n to√†n\n3. Theo d√µi v√† nh·∫≠n h·ªó tr·ª£ khi c·∫ßn',
  startDate: '2025-07-01',
  expectedDate: '2025-08-01',
  support: 'Gia ƒë√¨nh, b·∫°n b√®, chuy√™n gia t∆∞ v·∫•n',
  goalDays: 30
};

const PlanTab = ({ plan, progress, onUpdatePlan }) => {
  const [modalVisible, setModalVisible] = useState(false);
  const [planStatus, setPlanStatus] = useState(""); 
  const [formData, setFormData] = useState(() => {
    // Kh·ªüi t·∫°o formData t·ª´ localStorage ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
    const savedFormData = localStorage.getItem('planTabFormData');
    if (savedFormData) {
      try {
        return JSON.parse(savedFormData);
      } catch (e) {
        console.error('Error parsing saved form data:', e);
      }
    }
    return {
      reason: '',
      stages: '',
      startDate: '',
      expectedDate: '',
      support: '',
      goalDays: 30
    };
  });

  // L·∫•y k·∫ø ho·∫°ch v√† ti·∫øn tr√¨nh t·ª´ API khi load
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫ø ho·∫°ch
  useEffect(() => {
    if (!plan || !progress) {
      setPlanStatus("B·∫°n ch∆∞a t·∫°o k·∫ø ho·∫°ch cai thu·ªëc.");
      return;
    }
    
    const daysNoSmoke = progress.daysNoSmoke || 0;
    const goalDays = plan.goalDays || 60;
    
    if (daysNoSmoke >= goalDays) {
      setPlanStatus("üéâ Ho√†n th√†nh k·∫ø ho·∫°ch cai thu·ªëc!");
    } else {
      setPlanStatus(`üìà ƒê√£ kh√¥ng h√∫t thu·ªëc ${daysNoSmoke}/${goalDays} ng√†y (${Math.round((daysNoSmoke/goalDays)*100)}%)`);
    }
  }, [plan, progress]);

  // Load d·ªØ li·ªáu k·∫ø ho·∫°ch hi·ªán t·∫°i v√†o form
  useEffect(() => {
    if (plan) {
      const newFormData = {
        reason: plan.reason || '',
        stages: plan.stages || '',
        startDate: plan.startDate ? plan.startDate.split('T')[0] : '',
        expectedDate: plan.expectedDate ? plan.expectedDate.split('T')[0] : '',
        support: plan.support || '',
        goalDays: plan.goalDays || 30
      };
      setFormData(newFormData);
      // L∆∞u v√†o localStorage
      localStorage.setItem('planTabFormData', JSON.stringify(newFormData));
    }
  }, [plan]);

  // L∆∞u formData v√†o localStorage m·ªói khi c√≥ thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem('planTabFormData', JSON.stringify(formData));
  }, [formData]);

  const handleSuggestPlan = () => {
    const suggestedData = { ...samplePlan };
    setFormData(suggestedData);
    localStorage.setItem('planTabFormData', JSON.stringify(suggestedData));
    setModalVisible(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Ki·ªÉm tra ng√†y k·∫øt th√∫c
    if (!formData.expectedDate) {
      toast.error("Xin h√£y nh·∫≠p ng√†y k·∫øt th√∫c");
      return;
    }

    try {
      let newPlan;
      if (!plan) {
        // Ng√†y b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông l·∫•y ng√†y hi·ªán t·∫°i
        newPlan = {
          goalDays: parseInt(formData.goalDays),
          reason: formData.reason,
          reminderFrequency: 'daily',
          stages: formData.stages,
          support: formData.support,
          startDate: new Date().toISOString().split('T')[0], // Ng√†y hi·ªán t·∫°i
          expectedDate: formData.expectedDate
        };
      } else {
        // N·∫øu ƒë√£ c√≥ k·∫ø ho·∫°ch, truy·ªÅn c·∫£ hai ng√†y
        newPlan = {
          goalDays: parseInt(formData.goalDays),
          reason: formData.reason,
          reminderFrequency: 'daily',
          stages: formData.stages,
          support: formData.support,
          startDate: formData.startDate,
          expectedDate: formData.expectedDate
        };
      }

      await onUpdatePlan(newPlan);

      toast.success("ƒê√£ l∆∞u k·∫ø ho·∫°ch chi ti·∫øt!");
    } catch (error) {
      toast.error("L∆∞u k·∫ø ho·∫°ch th·∫•t b·∫°i!");
      console.error(error);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const acceptSuggestedPlan = () => {
    setModalVisible(false);
    // D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c set trong handleSuggestPlan v√† l∆∞u v√†o localStorage
    localStorage.setItem('planTabFormData', JSON.stringify(formData));
  };

  return (
    <div>
      <div className="d-flex align-items-center justify-content-between mb-4">
        <h3 className="fs-5 fw-semibold mb-0">
          <i className="fas fa-calendar-alt me-2 text-primary"></i>
          L·ªô tr√¨nh k·∫ø ho·∫°ch cai thu·ªëc
        </h3>
        <button 
          className="btn btn-outline-info btn-sm"
          onClick={handleSuggestPlan}
        >
          <i className="fas fa-lightbulb me-1"></i>
          G·ª£i √Ω k·∫ø ho·∫°ch
        </button>
      </div>

      {/* Tr·∫°ng th√°i hi·ªán t·∫°i */}
      <div className="alert alert-info mb-4">
        <div className="d-flex align-items-center">
          <i className="fas fa-chart-line me-2 fs-4"></i>
          <div>
            <strong>Tr·∫°ng th√°i hi·ªán t·∫°i:</strong>
            <div className="mt-1">{planStatus}</div>
          </div>
        </div>
      </div>

      {/* Progress bar */}
      {plan && progress && (
        <div className="mb-4">
          <div className="d-flex justify-content-between align-items-center mb-2">
            <span className="small text-muted">Ti·∫øn ƒë·ªô ho√†n th√†nh</span>
            <span className="small fw-bold">
              {Math.round(((progress.daysNoSmoke || 0) / (plan.goalDays || 60)) * 100)}%
            </span>
          </div>
          <div className="progress" style={{ height: '8px' }}>
            <div 
              className="progress-bar bg-success" 
              style={{ width: `${Math.min(((progress.daysNoSmoke || 0) / (plan.goalDays || 60)) * 100, 100)}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Form chi ti·∫øt k·∫ø ho·∫°ch */}
      <div className="card">
        <div className="card-header bg-light">
          <h5 className="card-title mb-0">
            <i className="fas fa-edit me-2"></i>
            Chi ti·∫øt k·∫ø ho·∫°ch cai thu·ªëc
          </h5>
        </div>
        <div className="card-body">
          <form onSubmit={handleSubmit}>
            <div className="row">
              <div className="col-md-6">
                <div className="mb-3">
                  <label className="form-label fw-semibold">
                    <i className="fas fa-heart me-1 text-danger"></i>
                    L√Ω do cai thu·ªëc *
                  </label>
                  <textarea
                    className="form-control"
                    rows={3}
                    value={formData.reason}
                    onChange={(e) => handleInputChange('reason', e.target.value)}
                    placeholder="Nh·∫≠p l√Ω do b·∫°n mu·ªën cai thu·ªëc..."
                    required
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label fw-semibold">
                    <i className="fas fa-list-ol me-1 text-info"></i>
                    C√°c giai ƒëo·∫°n th·ª±c hi·ªán *
                  </label>
                  <textarea
                    className="form-control"
                    rows={4}
                    value={formData.stages}
                    onChange={(e) => handleInputChange('stages', e.target.value)}
                    placeholder="Nh·∫≠p c√°c giai ƒëo·∫°n d·ª± ki·∫øn..."
                    required
                  />
                  <div className="form-text">
                    V√≠ d·ª•: 1. Gi·∫£m d·∫ßn s·ªë l∆∞·ª£ng thu·ªëc<br/>2. ƒê·∫∑t ng√†y cai ho√†n to√†n<br/>3. Theo d√µi v√† duy tr√¨
                  </div>
                </div>

                <div className="mb-3">
                  <label className="form-label fw-semibold">
                    <i className="fas fa-users me-1 text-success"></i>
                    Ngu·ªìn h·ªó tr·ª£
                  </label>
                  <textarea
                    className="form-control"
                    rows={2}
                    value={formData.support}
                    onChange={(e) => handleInputChange('support', e.target.value)}
                    placeholder="Gia ƒë√¨nh, b·∫°n b√®, chuy√™n gia t∆∞ v·∫•n..."
                  />
                </div>
              </div>

              <div className="col-md-6">
                {/* Ch·ªâ hi·ªÉn th·ªã tr∆∞·ªùng ng√†y b·∫Øt ƒë·∫ßu n·∫øu ƒë√£ c√≥ k·∫ø ho·∫°ch */}
                {plan && (
                  <div className="mb-3">
                    <label className="form-label fw-semibold">
                      <i className="fas fa-calendar-plus me-1 text-primary"></i>
                      Ng√†y b·∫Øt ƒë·∫ßu *
                    </label>
                    <input
                      type="date"
                      className="form-control"
                      value={formData.startDate}
                      readOnly
                      style={{ backgroundColor: "#f5f5f5" }}
                    />
                  </div>
                )}

                <div className="mb-3">
                  <label className="form-label fw-semibold">
                    <i className="fas fa-calendar-check me-1 text-success"></i>
                    Ng√†y d·ª± ki·∫øn ho√†n th√†nh *
                  </label>
                  <input
                    type="date"
                    className="form-control"
                    value={formData.expectedDate}
                    onChange={(e) => handleInputChange('expectedDate', e.target.value)}
                    required
                  />
                  {!formData.expectedDate && (
                    <div className="text-danger mt-1">Xin h√£y nh·∫≠p ng√†y k·∫øt th√∫c</div>
                  )}
                </div>

                <div className="mb-3">
                  <label className="form-label fw-semibold">
                    <i className="fas fa-target me-1 text-warning"></i>
                    S·ªë ng√†y m·ª•c ti√™u kh√¥ng h√∫t thu·ªëc *
                  </label>
                  <input
                    type="number"
                    className="form-control"
                    min="1"
                    max="365"
                    value={formData.goalDays}
                    onChange={(e) => handleInputChange('goalDays', e.target.value)}
                    required
                  />
                  <div className="form-text">
                    ƒê·ªÅ xu·∫•t: 30-90 ng√†y cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
                  </div>
                </div>
              </div>
            </div>

            <div className="d-flex gap-2 mt-4">
              <button type="submit" className="btn btn-primary">
                <i className="fas fa-save me-2"></i>
                L∆∞u k·∫ø ho·∫°ch chi ti·∫øt
              </button>
              <button 
                type="button" 
                className="btn btn-outline-secondary"
                onClick={handleSuggestPlan}
              >
                <i className="fas fa-magic me-2"></i>
                S·ª≠ d·ª•ng m·∫´u c√≥ s·∫µn
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* Hi·ªÉn th·ªã k·∫ø ho·∫°ch hi·ªán t·∫°i */}
      {plan && (
        <div className="card mt-4">
          <div className="card-header bg-success text-white">
            <h5 className="card-title mb-0">
              <i className="fas fa-clipboard-check me-2"></i>
              K·∫ø ho·∫°ch hi·ªán t·∫°i
            </h5>
          </div>
          <div className="card-body">
            <div className="row">
              <div className="col-md-6">
                <p><strong>M·ª•c ti√™u:</strong> {plan.goalDays || 60} ng√†y kh√¥ng h√∫t thu·ªëc</p>
                <p><strong>L√Ω do:</strong> {plan.reason || "V√¨ s·ª©c kh·ªèe v√† t∆∞∆°ng lai t·ªët ƒë·∫πp"}</p>
                <p><strong>T·∫ßn su·∫•t nh·∫Øc nh·ªü:</strong> {plan.reminderFrequency || "H√†ng ng√†y"}</p>
              </div>
              <div className="col-md-6">
                {/* Lu√¥n hi·ªÉn th·ªã ng√†y d·ª± ki·∫øn ho√†n th√†nh */}
                <p><strong>Ng√†y d·ª± ki·∫øn:</strong> {plan.expectedDate ? new Date(plan.expectedDate).toLocaleDateString('vi-VN') : "Ch∆∞a x√°c ƒë·ªãnh"}</p>
                <p><strong>√Åp d·ª•ng cho:</strong> T·∫•t c·∫£ th√†nh vi√™n c·ªông ƒë·ªìng</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal g·ª£i √Ω k·∫ø ho·∫°ch */}
      {modalVisible && (
        <div className="modal show d-block" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">
                  <i className="fas fa-lightbulb me-2 text-warning"></i>
                  G·ª£i √Ω k·∫ø ho·∫°ch m·∫´u
                </h5>
                <button 
                  type="button" 
                  className="btn-close"
                  onClick={() => setModalVisible(false)}
                ></button>
              </div>
              <div className="modal-body">
                <div className="alert alert-info">
                  <i className="fas fa-info-circle me-2"></i>
                  ƒê√¢y l√† k·∫ø ho·∫°ch m·∫´u ƒë∆∞·ª£c thi·∫øt k·∫ø d·ª±a tr√™n kinh nghi·ªám th√†nh c√¥ng c·ªßa nhi·ªÅu ng∆∞·ªùi ƒë√£ cai thu·ªëc.
                </div>
                
                <div className="row">
                  <div className="col-md-6">
                    <h6><i className="fas fa-heart me-1 text-danger"></i> L√Ω do:</h6>
                    <p className="text-muted">{samplePlan.reason}</p>
                    
                    <h6><i className="fas fa-calendar me-1 text-primary"></i> Th·ªùi gian:</h6>
                    <p className="text-muted">
                      <strong>B·∫Øt ƒë·∫ßu:</strong> {samplePlan.startDate}<br/>
                      <strong>D·ª± ki·∫øn:</strong> {samplePlan.expectedDate}<br/>
                      <strong>M·ª•c ti√™u:</strong> {samplePlan.goalDays} ng√†y
                    </p>
                  </div>
                  
                  <div className="col-md-6">
                    <h6><i className="fas fa-list-ol me-1 text-info"></i> C√°c giai ƒëo·∫°n:</h6>
                    <div className="text-muted" style={{ whiteSpace: 'pre-line' }}>
                      {samplePlan.stages}
                    </div>
                    
                    <h6 className="mt-3"><i className="fas fa-users me-1 text-success"></i> H·ªó tr·ª£:</h6>
                    <p className="text-muted">{samplePlan.support}</p>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => setModalVisible(false)}
                >
                  ƒê√≥ng
                </button>
                <button 
                  type="button" 
                  className="btn btn-primary"
                  onClick={acceptSuggestedPlan}
                >
                  <i className="fas fa-check me-2"></i>
                  S·ª≠ d·ª•ng k·∫ø ho·∫°ch n√†y
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PlanTab;