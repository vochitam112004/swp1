// Refactored Dashboard - Main component
import React, { useState, useEffect, useRef } from "react";
import { toast } from "react-toastify";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../auth/AuthContext";
import api from "../../api/axios";
import "../../css/Dashboard.css";

// Import separated components
import BadgeComponents from "./components/BadgeComponents";
import ProgressTracker from "./components/ProgressTracker";
import JournalManager from "./components/JournalManager";
import AppointmentManager from "./components/AppointmentManager";
import NotificationManager from "./components/NotificationManager";
import SevenDayProgressChart from "./components/SevenDayProgressChart";
import NotificationHistory from "./NotificationHistory";
import PlanTabNew from "./PlanTabNew";
import ProgressTab from "./ProgressTab";

// Import hooks and utils
import { useDashboardData } from "./hooks/useDashboardData";
import {
  safeParse,
  getAchievedBadges,
  sendBrowserNotification,
  calculateProgress,
  calculateGoalProgress
} from "./utils/dashboardUtils";
import { TABS, COMMUNITY_AVG } from "./constants/dashboardConstants";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  // Use custom hook for data management
  const {
    loading,
    memberProfile,
    smokingStatus,
    quitAttempts,
    experienceLevel,
    previousAttempts,
    cigarettesPerPack,
    appointments,
    coachList,
    planHistory,
    achievedBadges,
    hasMembership,
    progressLogs,
    progress,
    plan,
    currentGoal,
    setMemberProfile,
    setSmokingStatus,
    setQuitAttempts,
    setExperienceLevel,
    setPreviousAttempts,
    setCigarettesPerPack,
    setAppointments,
    setCoachList,
    setPlanHistory,
    setAchievedBadges,
    setProgressLogs,
    setProgress,
    setPlan,
    setCurrentGoal,
    fetchProfile,
    fetchAllData,
    fetchCoachList,
    fetchAppointments,
    deleteGoalPlan,
    fetchPlanHistory,
  } = useDashboardData();

  // Local state
  const [activeTab, setActiveTab] = useState("overview");
  const [journal, setJournal] = useState(() => safeParse("quitJournal", []));
  const [pricePerPack, setPricePerPack] = useState(() => localStorage.getItem("pricePerPack") || "");
  const [quitHistory] = useState(() => safeParse("quitHistory", []));

  // State cho mood tracking v√† trigger tracking
  const [todayMood, setTodayMood] = useState("");
  const [todayCigarettes, setTodayCigarettes] = useState("");
  const [selectedHistoryPlan, setSelectedHistoryPlan] = useState(null);
  const [historyProgressLogs, setHistoryProgressLogs] = useState([]);
  const [selectedTriggers, setSelectedTriggers] = useState([]);
  const [selectedSymptoms, setSelectedSymptoms] = useState([]);
  const [todayNote, setTodayNote] = useState("");
  // Th√™m state cho ng√†y ghi nh·∫≠n
  const [selectedLogDate, setSelectedLogDate] = useState("");

  const navigate = useNavigate();
  const { user, loading: authLoading } = useAuth();

  useEffect(() => {
    if (selectedLogDate) {
      const log = progressLogs.find(l => (l.logDate || l.date) === selectedLogDate);
      if (log) {
        setTodayCigarettes(log.cigarettesSmoked?.toString() || "");
        setTodayMood(log.mood || "");
        setSelectedTriggers(log.triggers || "");
        setSelectedSymptoms(log.symptoms || "");
        setTodayNote(log.notes || "");
      } else {
        setTodayCigarettes("");
        setTodayMood("");
        setSelectedTriggers("");
        setSelectedSymptoms("");
        setTodayNote("");
      }
    }
  }, [selectedLogDate, progressLogs]);

  // Danh s√°ch mood options
  const moodOptions = [
    { id: "rat_vui", label: "R·∫•t vui", emoji: "üòä", color: "#4CAF50" },
    { id: "vui", label: "Vui", emoji: "üòÑ", color: "#8BC34A" },
    { id: "binh_thuong", label: "B√¨nh th∆∞·ªùng", emoji: "üòê", color: "#FFC107" },
    { id: "buon", label: "Bu·ªìn", emoji: "üòü", color: "#FF9800" },
    { id: "rat_buon", label: "R·∫•t bu·ªìn", emoji: "üò¢", color: "#F44336" }
  ];

  // Danh s√°ch triggers
  const triggerOptions = [
    "CƒÉng th·∫≥ng c√¥ng vi·ªác", "U·ªëng c√† ph√©", "Sau b·ªØa ƒÉn",
    "G·∫∑p b·∫°n h√∫t thu·ªëc", "Nh·∫≠m ch√°n", "Bu·ªìn ch√°n",
    "T·ª©c gi·∫≠n", "L√°i xe", "U·ªëng r∆∞·ª£u bia"
  ];

  // Danh s√°ch tri·ªáu ch·ª©ng cai thu·ªëc
  const symptomOptions = [
    "C∆°n th√®m thu·ªëc", "CƒÉng th·∫≥ng", "Lo l·∫Øng",
    "Kh√≥ t·∫≠p trung", "M·∫•t ng·ªß", "D·ªÖ c√°u g·∫Øt",
    "ƒêau ƒë·∫ßu", "Ho khan", "TƒÉng c√¢n"
  ];

  // Khi activeTab l√† appointment, fetch appointments
  useEffect(() => {
    if (activeTab === "appointment") {
      fetchAppointments();
    }
  }, [activeTab, fetchAppointments]);

  // T√≠nh to√°n progress t·ª´ progressLogs
  useEffect(() => {
    if (progressLogs.length > 0) {
      const calculatedProgress = calculateProgress(progressLogs);
      setProgress(calculatedProgress);
    }
  }, [progressLogs, setProgress]);

  // Handle submit progress
  const handleSubmitDailyProgress = async (e) => {
    e.preventDefault();
    const logDate = selectedLogDate || new Date().toISOString().slice(0, 10);

    if (isNaN(todayCigarettes) || todayCigarettes === "" || todayCigarettes < 0) {
      toast.error("S·ªë ƒëi·∫øu thu·ªëc kh√¥ng h·ª£p l·ªá!");
      return;
    }
    if (!todayMood) {
      toast.error("Vui l√≤ng ch·ªçn t√¢m tr·∫°ng!");
      return;
    }
    try {
      const progressData = {
        logDate: logDate,
        notes: todayNote,
        cigarettesSmoked: parseInt(todayCigarettes),
        mood: todayMood,
        triggers: selectedTriggers,
        symptoms: selectedSymptoms,
        updatedAt: new Date().toISOString(),
      };
      await api.put("/ProgressLog/UpdateProgressLogByDate", progressData);
      await fetchAllData();
      setTodayCigarettes("");
      setTodayMood("");
      setSelectedTriggers([]);
      setSelectedSymptoms([]);
      setTodayNote("");
      setSelectedLogDate("");
      toast.success("ƒê√£ ghi nh·∫≠n ti·∫øn tr√¨nh th√†nh c√¥ng!");
      setActiveTab("overview");
    } catch (error) {
      console.error("Error saving progress:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi l∆∞u ti·∫øn tr√¨nh!");
    }
  };

  const fetchProgressLogsByPlanId = async (planId) => {
    try {
      const res = await api.get(`/GoalPlan/GetHistoryGoalPlan/${planId}`);
      // res.data.progressLogs l√† m·∫£ng log, res.data.goalPlan l√† k·∫ø ho·∫°ch
      setHistoryProgressLogs(res.data.progressLogs || []);
      if (!res.data.progressLogs || res.data.progressLogs.length === 0) {
        toast.info("Kh√¥ng c√≥ ti·∫øn tr√¨nh n√†o cho k·∫ø ho·∫°ch n√†y!");
      }
    } catch (error) {
      toast.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c ti·∫øn tr√¨nh k·∫ø ho·∫°ch n√†y!");
      setHistoryProgressLogs([]);
    }
  };

  // Loading states
  if (authLoading || loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ minHeight: "50vh" }}>
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <p className="mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  if (!hasMembership) return null;

  // T√≠nh ph·∫ßn trƒÉm ho√†n th√†nh m·ª•c ti√™u
  const percent = calculateGoalProgress(currentGoal, plan);

  // Render overview tab content
  const renderOverviewTab = () => (
    <div className="fade-in">
      {/* Header v·ªõi th√¥ng tin ng∆∞·ªùi d√πng */}
      <div className="dashboard-header text-white p-4 mb-4">
        <div className="content">
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h3 className="mb-1">Ch√†o m·ª´ng tr·ªü l·∫°i, {memberProfile?.displayName || user?.fullName || 'Ng∆∞·ªùi d√πng'}</h3>
              <p className="mb-0 opacity-75">B·∫°n ƒë√£ kh√¥ng h√∫t thu·ªëc ƒë∆∞·ª£c {currentGoal?.daysReducedSmoking || 0} ng√†y</p>
            </div>
            <div className="text-end">
              <h2 className="mb-0">{(currentGoal?.totalMoneySaved || 0).toLocaleString()}ƒë</h2>
              <small className="opacity-75">Ti·ªÅn ƒë√£ ti·∫øt ki·ªám</small>
            </div>
          </div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="row g-3 mb-4">
        <div className="col-6 col-md-3">
          <div className="card stats-card border-0 h-100">
            <div className="card-body text-center">
              <div className="icon-wrapper bg-success mx-auto mb-2">
                <i className="fas fa-calendar-check text-white"></i>
              </div>
              <div className="fw-bold">b·∫°n ƒë√£ th·ª±c hi·ªán cai h√∫t thu·ªëc</div>
              <h4 className="text-dark mb-0 fw-bold">{currentGoal?.daysReducedSmoking || 0}</h4>
              <small className="text-muted">ng√†y</small>
              <div className="mt-2">
                <small className="text-success">Ng√†y kh√¥ng h√∫t thu·ªëc</small>
              </div>
            </div>
          </div>
        </div>
        <div className="col-6 col-md-3">
          <div className="card stats-card border-0 h-100">
            <div className="card-body text-center">
              <div className="icon-wrapper bg-primary mx-auto mb-2">
                <i className="fas fa-coins text-white"></i>
              </div>
              <div className="fw-bold">T·ªïng s·ªë ti·ªÅn ti·∫øt ki·ªám</div>
              <h4 className="text-dark mb-0 fw-bold">{(currentGoal?.totalMoneySaved || 0).toLocaleString()}</h4>
              <small className="text-muted">ƒë</small>
              <div className="mt-2">
                <small className="text-primary">Ti·ªÅn ti·∫øt ki·ªám</small>
              </div>
            </div>
          </div>
        </div>
        <div className="col-6 col-md-3">
          <div className="card stats-card border-0 h-100">
            <div className="card-body text-center">
              <div className="icon-wrapper bg-danger mx-auto mb-2">
                <i className="fas fa-smoking-ban text-white"></i>
              </div>
              <div className="fw-bold">C·∫£i thi·ªán s·ª©c kh·ªèe</div>
              <h4 className="text-dark mb-0 fw-bold">{progress.health || 78}</h4>
              <small className="text-muted">/100</small>
              <div className="mt-2">
                <small className="text-danger">ƒêi·ªÉm s·ª©c kh·ªèe</small>
              </div>
            </div>
          </div>
        </div>
        <div className="col-6 col-md-3">
          <div className="card stats-card border-0 h-100">
            <div className="card-body text-center">
              <div className="icon-wrapper bg-warning mx-auto mb-2">
                <i className="fas fa-chart-line text-white"></i>
              </div>
              <div className="fw-bold">K·ªÉ t·ª´ ng√†y ƒëƒÉng k√Ω g√≥i</div>
              <h4 className="text-dark mb-0 fw-bold">
                {plan?.createdAt
                  ? Math.floor((new Date() - new Date(plan.createdAt)) / (1000 * 60 * 60 * 24))
                  : 0}
              </h4>
              <small className="text-muted">ng√†y</small>
              <div className="mt-2">
                <small className="text-warning">Th·ªùi gian th√†nh c√¥ng</small>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* H√†nh ƒë·ªông nhanh */}
      <div className="section-card">
        <div className="card-body">
          <h5 className="card-title mb-3">H√†nh ƒë·ªông nhanh</h5>
          <div className="row g-3">
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => setActiveTab("daily-log")}
              >
                <div className="icon-wrapper bg-success mb-2">
                  <i className="fas fa-check-circle text-white"></i>
                </div>
                <small className="text-dark">Ghi nh·∫≠n h√¥m nay</small>
                <div className="mt-1">
                  <small className="text-muted">C·∫≠p nh·∫≠t ti·∫øn tr√¨nh</small>
                </div>
              </button>
            </div>
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => setActiveTab("plan")}
              >
                <div className="icon-wrapper bg-primary mb-2">
                  <i className="fas fa-bullseye text-white"></i>
                </div>
                <small className="text-dark">T·∫°o k·∫ø ho·∫°ch</small>
                <div className="mt-1">
                  <small className="text-muted">L·∫≠p k·∫ø ho·∫°ch m·ªõi</small>
                </div>
              </button>
            </div>
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => navigate('/coaches')}
              >
                <div className="icon-wrapper bg-info mb-2">
                  <i className="fas fa-user-md text-white"></i>
                </div>
                <small className="text-dark">Chat hu·∫•n luy·ªán vi√™n</small>
                <div className="mt-1">
                  <small className="text-muted">T∆∞ v·∫•n tr·ª±c ti·∫øp</small>
                </div>
              </button>
            </div>
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => setActiveTab("appointment")}
              >
                <div className="icon-wrapper bg-warning mb-2">
                  <i className="fas fa-calendar-alt text-white"></i>
                </div>
                <small className="text-dark">ƒê·∫∑t l·ªãch h·∫πn</small>
                <div className="mt-1">
                  <small className="text-muted">H·∫πn v·ªõi chuy√™n gia</small>
                </div>
              </button>
            </div>
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => setActiveTab("notifications")}
              >
                <div className="icon-wrapper bg-secondary mb-2">
                  <i className="fas fa-history text-white"></i>
                </div>
                <small className="text-dark">L·ªãch s·ª≠ th√¥ng b√°o</small>
                <div className="mt-1">
                  <small className="text-muted">Xem th√¥ng b√°o c≈©</small>
                </div>
              </button>
            </div>
            <div className="col-6 col-md-2">
              <button
                className="quick-action-btn btn w-100 d-flex flex-column align-items-center justify-content-center"
                onClick={() => setActiveTab("achievements")}
              >
                <div className="icon-wrapper bg-dark mb-2">
                  <i className="fas fa-trophy text-white"></i>
                </div>
                <small className="text-dark">K·∫øt t∆∞ nguy d√†ng l√Ω</small>
                <div className="mt-1">
                  <small className="text-muted">Xem th√†nh t√≠ch</small>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh 7 ng√†y */}
      <SevenDayProgressChart progressLogs={progressLogs} />
    </div>
  );

  // Render tab ghi nh·∫≠n h√¥m nay
  const renderDailyLogTab = () => {
    // L·∫•y danh s√°ch ng√†y trong kho·∫£ng k·∫ø ho·∫°ch
    let planDates = [];
    if (plan && plan.startDate && plan.endDate) {
      const start = new Date(plan.startDate);
      const end = new Date(plan.endDate);
      for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
        planDates.push(d.toISOString().slice(0, 10));
      }
    }
    // L·ªçc ra c√°c ng√†y ƒë√£ ghi nh·∫≠n
    const loggedDates = progressLogs.map(log => log.logDate || log.date);
    // N·∫øu ƒë√£ ch·ªçn ng√†y th√¨ ki·ªÉm tra ng√†y ƒë√≥ ƒë√£ ghi nh·∫≠n ch∆∞a
    const alreadyLogged = selectedLogDate && loggedDates.includes(selectedLogDate);
    return (
      <div className="fade-in">
        {/* Header */}
        <div className="dashboard-header text-white p-4 mb-4">
          <div className="content">
            <div className="text-center">
              <h3 className="mb-1">
                <i className="fas fa-calendar-check me-2"></i>
                Ghi nh·∫≠n ti·∫øn tr√¨nh
              </h3>
              <p className="mb-0 opacity-75">
                {alreadyLogged
                  ? `B·∫°n ƒë√£ ghi nh·∫≠n cho ng√†y ${selectedLogDate}. C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!`
                  : "H√£y ch·ªçn ng√†y trong k·∫ø ho·∫°ch ƒë·ªÉ ghi nh·∫≠n ti·∫øn tr√¨nh c·ªßa b·∫°n"
                }
              </p>
            </div>
          </div>
        </div>

        {alreadyLogged ? (
          <div className="section-card">
            <div className="card-body text-center">
              <i className="fas fa-check-circle text-success" style={{ fontSize: "4rem" }}></i>
              <h4 className="mt-3 text-success">ƒê√£ ghi nh·∫≠n ng√†y n√†y!</h4>
              <p className="text-muted">C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª ti·∫øn tr√¨nh</p>
              <button
                className="btn btn-outline-primary mt-3"
                onClick={() => setActiveTab("overview")}
              >
                <i className="fas fa-arrow-left me-2"></i>Quay v·ªÅ t·ªïng quan
              </button>
            </div>
          </div>
        ) : (
          <form onSubmit={handleSubmitDailyProgress}>
            {/* Ch·ªçn ng√†y trong k·∫ø ho·∫°ch */}
            <div className="section-card mb-4">
              <div className="card-body">
                <h5 className="card-title">
                  <i className="fas fa-calendar-alt me-2"></i>Ch·ªçn ng√†y ghi nh·∫≠n *
                </h5>
                <select
                  className="form-select"
                  value={selectedLogDate}
                  onChange={e => setSelectedLogDate(e.target.value)}
                  required
                >
                  <option value="">-- Ch·ªçn ng√†y --</option>
                  {planDates.map(date => (
                    <option key={date} value={date}>
                      {new Date(date).toLocaleDateString('vi-VN')}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            {/* S·ªë ƒëi·∫øu thu·ªëc */}
            <div className="daily-progress-card mb-4">
              <div className="card-header text-white">
                <h5 className="mb-0">
                  <i className="fas fa-smoking me-2"></i>
                  S·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay
                </h5>
              </div>
              <div className="card-body">
                <div className="progress-input-group input-group">
                  <button
                    type="button"
                    className="btn btn-outline-danger"
                    onClick={() => setTodayCigarettes(Math.max(0, parseInt(todayCigarettes || 0) - 1).toString())}
                  >
                    <i className="fas fa-minus"></i>
                  </button>
                  <input
                    type="number"
                    className="form-control text-center"
                    value={todayCigarettes}
                    onChange={(e) => setTodayCigarettes(e.target.value)}
                    min="0"
                    placeholder="0"
                  />
                  <span className="input-group-text">ƒëi·∫øu thu·ªëc</span>
                  <button
                    type="button"
                    className="btn btn-outline-success"
                    onClick={() => setTodayCigarettes((parseInt(todayCigarettes || 0) + 1).toString())}
                  >
                    <i className="fas fa-plus"></i>
                  </button>
                </div>
                {todayCigarettes === "0" && (
                  <div className="alert alert-success mt-3 mb-0">
                    <i className="fas fa-trophy me-2"></i>
                    Tuy·ªát v·ªùi! B·∫°n ƒë√£ kh√¥ng h√∫t thu·ªëc h√¥m nay
                  </div>
                )}
              </div>
            </div>

            {/* T√¢m tr·∫°ng h√¥m nay */}
            <div className="section-card mb-4">
              <div className="card-body">
                <h5 className="card-title">
                  <i className="fas fa-heart me-2"></i>T√¢m tr·∫°ng h√¥m nay *
                </h5>
                <div className="row g-2">
                  {moodOptions.map((mood) => (
                    <div key={mood.id} className="col-4 col-md-2">
                      <button
                        type="button"
                        className={`mood-btn btn w-100 d-flex flex-column align-items-center ${todayMood === mood.id ? 'btn-primary active' : 'btn-outline-secondary'
                          }`}
                        onClick={() => setTodayMood(mood.id)}
                        style={todayMood === mood.id ? { backgroundColor: mood.color, borderColor: mood.color } : {}}
                      >
                        <span className="fs-2 mb-1">{mood.emoji}</span>
                        <small>{mood.label}</small>
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Y·∫øu t·ªë k√≠ch ho·∫°t th√™m thu·ªëc */}
            <div className="section-card mb-4">
              <div className="card-body">
                <h5 className="card-title">
                  <i className="fas fa-exclamation-triangle me-2"></i>Y·∫øu t·ªë k√≠ch ho·∫°t th√®m thu·ªëc
                </h5>
                <p className="text-muted small mb-3">Nh·∫≠p c√°c y·∫øu t·ªë ƒë√£ khi·∫øn b·∫°n mu·ªën h√∫t thu·ªëc h√¥m nay</p>
                <input
                  type="text"
                  className="form-control"
                  placeholder="V√≠ d·ª•: CƒÉng th·∫≥ng c√¥ng vi·ªác, U·ªëng c√† ph√™, ..."
                  value={selectedTriggers}
                  onChange={e => setSelectedTriggers(e.target.value)}
                />
              </div>
            </div>

            {/* Tri·ªáu ch·ª©ng cai thu·ªëc */}
            <div className="section-card mb-4">
              <div className="card-body">
                <h5 className="card-title">
                  <i className="fas fa-heartbeat me-2"></i>Tri·ªáu ch·ª©ng cai thu·ªëc
                </h5>
                <p className="text-muted small mb-3">Nh·∫≠p c√°c tri·ªáu ch·ª©ng b·∫°n ƒë√£ tr·∫£i qua h√¥m nay</p>
                <input
                  type="text"
                  className="form-control"
                  placeholder="V√≠ d·ª•: CƒÉng th·∫≥ng, Ho khan, ..."
                  value={selectedSymptoms}
                  onChange={e => setSelectedSymptoms(e.target.value)}
                />
              </div>
            </div>

            {/* Ghi ch√∫ th√™m */}
            <div className="section-card mb-4">
              <div className="card-body">
                <h5 className="card-title">
                  <i className="fas fa-edit me-2"></i>Ghi ch√∫ th√™m
                </h5>
                <textarea
                  className="form-control"
                  rows="3"
                  placeholder="Chia s·∫ª c·∫£m nghƒ©, th√°ch th·ª©c ho·∫∑c th√†nh t·ª±u c·ªßa b·∫°n h√¥m nay..."
                  value={todayNote}
                  onChange={(e) => setTodayNote(e.target.value)}
                  maxLength="500"
                />
                <div className="text-end mt-2">
                  <small className="text-muted">{todayNote.length}/500 k√≠ t·ª±</small>
                </div>
              </div>
            </div>

            {/* Submit button */}
            <div className="text-center">
              <button type="submit" className="btn btn-success btn-lg px-5">
                <i className="fas fa-save me-2"></i>L∆∞u ghi nh·∫≠n h√¥m nay
              </button>
            </div>
          </form>
        )}
      </div>
    );
  };

  // Render tab content
  const renderTabContent = () => {
    switch (activeTab) {
      case TABS.OVERVIEW:
        return renderOverviewTab();

      case "daily-log":
        return renderDailyLogTab();

      case "progress":
        return (
          <ProgressTab
            progressLogs={progressLogs || []}
            currentGoal={currentGoal}
            plan={plan}
          />
        );

      case TABS.PLAN:
        return (
          <PlanTabNew />
        );

      case "planhistory": {
        const completedPlans = planHistory.filter(plan =>
          plan.isCurrentGoal === false && plan.userId === user?.id
        );
        return (
          <div>
            <h3>L·ªãch s·ª≠ k·∫ø ho·∫°ch</h3>
            {completedPlans.length > 0 ? (
              <div className="table-responsive">
                <table className="table table-striped align-middle">
                  <thead>
                    <tr>
                      <th className="text-center">Ng∆∞·ªùi t·∫°o</th>
                      <th className="text-center">Ng√†y b·∫Øt ƒë·∫ßu</th>
                      <th className="text-center">Ng√†y k·∫øt th√∫c</th>
                      <th className="text-center">Tr·∫°ng th√°i</th>
                      <th className="text-center">Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {completedPlans.map((historyPlan, idx) => (
                      <tr key={idx}>
                        <td className="text-center">{historyPlan.memberDisplayName}</td>
                        <td className="text-center">{new Date(historyPlan.startDate).toLocaleDateString('vi-VN')}</td>
                        <td className="text-center">{new Date(historyPlan.endDate).toLocaleDateString('vi-VN')}</td>
                        <td className="text-center">
                          <span className="badge bg-success">Ho√†n th√†nh/T·∫°m ng∆∞ng</span>
                        </td>
                        <td className="text-center">
                          <button
                            className="btn btn-info btn-sm me-2"
                            onClick={async () => {
                              setSelectedHistoryPlan(historyPlan);
                              await fetchProgressLogsByPlanId(historyPlan.planId);
                            }}
                          >
                            <i className="fas fa-eye me-1"></i>Xem ti·∫øn tr√¨nh
                          </button>
                          <button
                            className="btn btn-danger btn-sm"
                            onClick={async () => {
                              if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a k·∫ø ho·∫°ch n√†y?")) {
                                try {
                                  await deleteGoalPlan(historyPlan.planId);
                                  toast.success("ƒê√£ x√≥a k·∫ø ho·∫°ch!");
                                  fetchPlanHistory();
                                  setSelectedHistoryPlan(null);
                                } catch (error) {
                                  toast.error(error.message || "X√≥a k·∫ø ho·∫°ch th·∫•t b·∫°i! C√≥ th·ªÉ k·∫ø ho·∫°ch ƒë√£ c√≥ nh·∫≠t k√Ω ti·∫øn tr√¨nh.");
                                }
                              }
                            }}
                          >
                            <i className="fas fa-trash me-1"></i>X√≥a
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                {selectedHistoryPlan && (
                  <div className="mt-4">
                    <h4>
                      Ti·∫øn tr√¨nh c·ªßa k·∫ø ho·∫°ch: <span className="text-primary fw-bold">{selectedHistoryPlan.memberDisplayName}</span>
                    </h4>
                    {historyProgressLogs.length > 0 ? (
                      <div className="table-responsive">
                        <table className="table table-bordered align-middle">
                          <thead className="table-light">
                            <tr>
                              <th className="text-center">Ng√†y ghi nh·∫≠n</th>
                              <th className="text-center">S·ªë ƒëi·∫øu thu·ªëc</th>
                              <th className="text-center">T√¢m tr·∫°ng</th>
                              <th className="text-center">Y·∫øu t·ªë k√≠ch ho·∫°t</th>
                              <th className="text-center">Tri·ªáu ch·ª©ng</th>
                              <th className="text-center">Ghi ch√∫</th>
                            </tr>
                          </thead>
                          <tbody>
                            {historyProgressLogs.map((log, idx) => {
                              const moodMap = {
                                'rat_vui': { label: 'R·∫•t vui', emoji: 'üòä', color: 'success' },
                                'vui': { label: 'Vui', emoji: 'üòÑ', color: 'success' },
                                'binh_thuong': { label: 'B√¨nh th∆∞·ªùng', emoji: 'üòê', color: 'warning' },
                                'buon': { label: 'Bu·ªìn', emoji: 'üòü', color: 'warning' },
                                'rat_buon': { label: 'R·∫•t bu·ªìn', emoji: 'üò¢', color: 'danger' }
                              };
                              const moodInfo = moodMap[log.mood] || { label: 'Kh√¥ng r√µ', emoji: '‚ùì', color: 'secondary' };
                              return (
                                <tr key={idx}>
                                  <td className="text-center">{new Date(log.logDate).toLocaleDateString('vi-VN')}</td>
                                  <td className="text-center">
                                    <span className={`badge ${log.cigarettesSmoked === 0 ? 'bg-success' : log.cigarettesSmoked <= 5 ? 'bg-warning' : 'bg-danger'}`}>
                                      {log.cigarettesSmoked || 0} ƒëi·∫øu
                                    </span>
                                  </td>
                                  <td className="text-center">
                                    <span className={`badge bg-${moodInfo.color}`}>
                                      {moodInfo.emoji} {moodInfo.label}
                                    </span>
                                  </td>
                                  <td>{log.triggers || <span className="text-muted">Kh√¥ng c√≥</span>}</td>
                                  <td>{log.symptoms || <span className="text-muted">Kh√¥ng c√≥</span>}</td>
                                  <td>
                                    {log.notes
                                      ? <span title={log.notes}>{log.notes.length > 30 ? log.notes.slice(0, 30) + "..." : log.notes}</span>
                                      : <span className="text-muted">Kh√¥ng c√≥</span>
                                    }
                                  </td>
                                </tr>
                              );
                            })}
                          </tbody>
                        </table>
                      </div>
                    ) : (
                      <div className="text-muted py-4 text-center">
                        <i className="fas fa-info-circle me-2"></i>Ch∆∞a c√≥ ti·∫øn tr√¨nh cho k·∫ø ho·∫°ch n√†y.
                      </div>
                    )}
                    <button className="btn btn-secondary mt-2" onClick={() => setSelectedHistoryPlan(null)}>
                      <i className="fas fa-arrow-left me-2"></i>ƒê√≥ng
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-center py-5">
                <i className="fas fa-history text-muted" style={{ fontSize: "4rem" }} />
                <h4 className="mt-3 text-muted">Ch∆∞a c√≥ l·ªãch s·ª≠ k·∫ø ho·∫°ch</h4>
              </div>
            )}
          </div>
        );
      }

      case TABS.JOURNAL:
        return (
          <JournalManager
            journal={journal}
            setJournal={setJournal}
            progressLogs={progressLogs}
          />
        );

      case "achievements":
        return (
          <BadgeComponents
            progress={progress}
            achievedBadges={achievedBadges}
            setAchievedBadges={setAchievedBadges}
          />
        );

      case "report":
        return (
          <div>
            <h3>B√°o c√°o n√¢ng cao</h3>
            <div className="row">
              <div className="col-md-6">
                <div className="card">
                  <div className="card-body">
                    <h5>Th·ªëng k√™ t·ªïng qu√°t</h5>
                    <p>T·ªïng s·ªë l·∫ßn cai: {quitHistory.length + 1}</p>
                    <p>K·ª∑ l·ª•c: {Math.max(...[...quitHistory.map(h => h.daysNoSmoke), progress.daysNoSmoke], 0)} ng√†y</p>
                    <p>T·ªïng ti·ªÅn ti·∫øt ki·ªám: {(currentGoal?.totalMoneySaved || 0).toLocaleString()}ƒë</p>
                  </div>
                </div>
              </div>
              <div className="col-md-6">
                <div className="card">
                  <div className="card-body">
                    <h5>So s√°nh v·ªõi c·ªông ƒë·ªìng</h5>
                    <div className="mb-2">
                      <small>Ng√†y kh√¥ng h√∫t</small>
                      <div className="progress">
                        <div
                          className="progress-bar"
                          style={{ width: `${Math.min((progress.daysNoSmoke / COMMUNITY_AVG.daysNoSmoke) * 100, 100)}%` }}
                        />
                      </div>
                      <small>{progress.daysNoSmoke}/{COMMUNITY_AVG.daysNoSmoke}</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case TABS.APPOINTMENT:
        return (
          <AppointmentManager
          />
        );

      case TABS.NOTIFICATIONS:
        return (
          <NotificationManager
            progress={progress}
            plan={plan}
          />
        );

      default:
        return renderOverviewTab();
    }
  };

  return (
    <div className="bg-white py-5">
      <div className="container">
        <div className="text-center mb-5">
          <h2 className="text-primary text-uppercase fw-semibold fs-6">
            Dashboard c√° nh√¢n
          </h2>
          <p className="mt-2 display-6 fw-bold text-dark">
            Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n
          </p>
        </div>

        <div className="bg-white shadow rounded-4 overflow-hidden">
          {/* Navigation Tabs */}
          <ul className="nav nav-tabs px-3 pt-3">
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "overview" ? "active" : ""}`}
                onClick={() => setActiveTab("overview")}
              >
                <i className="fas fa-chart-pie me-2"></i>T·ªïng quan
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "daily-log" ? "active" : ""}`}
                onClick={() => setActiveTab("daily-log")}
              >
                <i className="fas fa-calendar-check me-2"></i>Ghi nh·∫≠n h√¥m nay
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "progress" ? "active" : ""}`}
                onClick={() => setActiveTab("progress")}
              >
                <i className="fas fa-chart-line me-2"></i>Ti·∫øn tr√¨nh
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "plan" ? "active" : ""}`}
                onClick={() => setActiveTab("plan")}
              >
                <i className="fas fa-calendar-alt me-2"></i>K·∫ø ho·∫°ch
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "planhistory" ? "active" : ""}`}
                onClick={() => setActiveTab("planhistory")}
              >
                <i className="fas fa-history me-2"></i>L·ªãch s·ª≠ k·∫ø ho·∫°ch
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "journal" ? "active" : ""}`}
                onClick={() => setActiveTab("journal")}
              >
                <i className="fas fa-book me-2"></i>Nh·∫≠t k√Ω
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "achievements" ? "active" : ""}`}
                onClick={() => setActiveTab("achievements")}
              >
                <i className="fas fa-award me-2"></i>Th√†nh t√≠ch
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "report" ? "active" : ""}`}
                onClick={() => setActiveTab("report")}
              >
                <i className="fas fa-chart-bar me-2"></i>B√°o c√°o n√¢ng cao
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "appointment" ? "active" : ""}`}
                onClick={() => setActiveTab("appointment")}
              >
                <i className="fas fa-calendar-alt me-2"></i>L√™n l·ªãch h·∫πn
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === "notifications" ? "active" : ""}`}
                onClick={() => setActiveTab("notifications")}
              >
                <i className="fas fa-bell me-2"></i>Th√¥ng b√°o
              </button>
            </li>
          </ul>

          {/* Tab Content */}
          <div className="p-4">
            {renderTabContent()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
