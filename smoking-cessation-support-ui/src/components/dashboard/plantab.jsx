import React, { useEffect, useState } from 'react';
import { Form, Input, DatePicker, Button, Modal, InputNumber } from 'antd';
import moment from 'moment';

const samplePlan = {
  reason: 'B·∫£o v·ªá s·ª©c kh·ªèe, ti·∫øt ki·ªám chi ph√≠, l√†m g∆∞∆°ng cho con c√°i',
  stages: '1. Gi·∫£m d·∫ßn s·ªë l∆∞·ª£ng thu·ªëc m·ªói ng√†y\n2. ƒê·∫∑t ng√†y cai ho√†n to√†n\n3. Theo d√µi v√† nh·∫≠n h·ªó tr·ª£ khi c·∫ßn',
  startDate: '2025-07-01',
  expectedDate: '2025-08-01',
  support: 'Gia ƒë√¨nh, b·∫°n b√®, chuy√™n gia t∆∞ v·∫•n',
  goalDays: 30
};

const PlanTab = () => {
  const [form] = Form.useForm();
  const [modalVisible, setModalVisible] = useState(false);
  const [planStatus, setPlanStatus] = useState(""); // tr·∫°ng th√°i k·∫ø ho·∫°ch

  // H√†m ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh
  const checkPlanStatus = () => {
    const plan = JSON.parse(localStorage.getItem("quitPlan") || "{}");
    const progress = JSON.parse(localStorage.getItem("quitProgress") || "{}");
    if (plan && plan.goalDays) {
      if (progress && progress.daysNoSmoke) {
        if (progress.daysNoSmoke >= Number(plan.goalDays)) {
          setPlanStatus("Ho√†n th√†nh k·∫ø ho·∫°ch cai thu·ªëc! üéâ");
        } else {
          setPlanStatus(`ƒê√£ kh√¥ng h√∫t thu·ªëc ${progress.daysNoSmoke}/${plan.goalDays} ng√†y.`);
        }
      } else {
        setPlanStatus("Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn tr√¨nh.");
      }
    } else {
      setPlanStatus("B·∫°n ch∆∞a t·∫°o k·∫ø ho·∫°ch cai thu·ªëc.");
    }
  };

  useEffect(() => {
    checkPlanStatus();
    // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi localStorage t·ª´ c√°c tab kh√°c
    const handleStorage = (e) => {
      if (e.key === "quitProgress" || e.key === "quitPlan") {
        checkPlanStatus();
      }
    };
    window.addEventListener("storage", handleStorage);

    // Ki·ªÉm tra ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i trong c√πng tab
    const interval = setInterval(() => {
      checkPlanStatus();
    }, 1000); // ki·ªÉm tra m·ªói 1 gi√¢y

    return () => {
      window.removeEventListener("storage", handleStorage);
      clearInterval(interval);
    };
  }, []);

  const handleSuggestPlan = () => {
    form.setFieldsValue({
      reason: samplePlan.reason,
      stages: samplePlan.stages,
      startDate: samplePlan.startDate ? moment(samplePlan.startDate) : null,
      expectedDate: samplePlan.expectedDate ? moment(samplePlan.expectedDate) : null,
      support: samplePlan.support,
      goalDays: samplePlan.goalDays,
    });
    setModalVisible(true);
  };

  const onFinish = (values) => {
    // L∆∞u k·∫ø ho·∫°ch v√†o localStorage
    localStorage.setItem("quitPlan", JSON.stringify(values));
    checkPlanStatus();
    console.log('K·∫ø ho·∫°ch ƒë√£ l∆∞u:', values);
  };

  return (
    <div>
      <h2>K·∫ø ho·∫°ch cai thu·ªëc</h2>
      <div style={{ marginBottom: 16, color: "#1976d2", fontWeight: 600 }}>
        {planStatus}
      </div>
      <Form form={form} layout="vertical" onFinish={onFinish}>
        <Form.Item label="L√Ω do cai thu·ªëc" name="reason" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l√Ω do!' }]}>
          <Input.TextArea rows={2} placeholder="Nh·∫≠p l√Ω do b·∫°n mu·ªën cai thu·ªëc..." />
        </Form.Item>
        <Form.Item label="C√°c giai ƒëo·∫°n" name="stages" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p c√°c giai ƒëo·∫°n!' }]}>
          <Input.TextArea rows={3} placeholder="Nh·∫≠p c√°c giai ƒëo·∫°n d·ª± ki·∫øn..." />
        </Form.Item>
        <Form.Item label="Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu" name="startDate" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}>
          <DatePicker format="YYYY-MM-DD" />
        </Form.Item>
        <Form.Item label="Th·ªùi ƒëi·ªÉm d·ª± ki·∫øn ho√†n th√†nh" name="expectedDate">
          <DatePicker format="YYYY-MM-DD" />
        </Form.Item>
        <Form.Item label="S·ªë ng√†y m·ª•c ti√™u kh√¥ng h√∫t thu·ªëc" name="goalDays" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ng√†y m·ª•c ti√™u!' }]}>
          <InputNumber min={1} placeholder="Nh·∫≠p s·ªë ng√†y m·ª•c ti√™u" style={{ width: '100%' }} />
        </Form.Item>
        <Form.Item label="H·ªó tr·ª£ ph√°t sinh k·∫ø ho·∫°ch" name="support">
          <Input.TextArea rows={2} placeholder="Nh·∫≠p c√°c ngu·ªìn h·ªó tr·ª£ (gia ƒë√¨nh, b·∫°n b√®, chuy√™n gia...)" />
        </Form.Item>
        <Form.Item>
          <Button type="primary" htmlType="submit">L∆∞u k·∫ø ho·∫°ch</Button>
          <Button style={{ marginLeft: 8 }} onClick={handleSuggestPlan}>G·ª£i √Ω k·∫ø ho·∫°ch</Button>
        </Form.Item>
      </Form>
      <Modal
        title="G·ª£i √Ω k·∫ø ho·∫°ch m·∫´u"
        open={modalVisible}
        onOk={() => setModalVisible(false)}
        onCancel={() => setModalVisible(false)}
        okText="ƒê·ªìng √Ω"
        cancelText="ƒê√≥ng"
      >
        <p><b>L√Ω do:</b> {samplePlan.reason}</p>
        <p><b>C√°c giai ƒëo·∫°n:</b><br />{samplePlan.stages}</p>
        <p><b>Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu:</b> {samplePlan.startDate}</p>
        <p><b>Th·ªùi ƒëi·ªÉm d·ª± ki·∫øn:</b> {samplePlan.expectedDate}</p>
        <p><b>S·ªë ng√†y m·ª•c ti√™u:</b> {samplePlan.goalDays}</p>
        <p><b>H·ªó tr·ª£:</b> {samplePlan.support}</p>
      </Modal>
    </div>
  );
};

export default PlanTab;