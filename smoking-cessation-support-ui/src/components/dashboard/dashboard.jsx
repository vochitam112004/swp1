// C√≥ th·ªÉ l√† giao di·ªán ch√≠nh ng∆∞·ªùi d√πng.
import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { saveAs } from "file-saver"; 

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

// ƒê·∫∑t BADGES v√† getAchievedBadges ra ngo√†i function Dashboard
const BADGES = [
  { key: "1day", label: "1 ng√†y kh√¥ng h√∫t", icon: "fas fa-calendar-check", condition: (p) => p.daysNoSmoke >= 1 },
  { key: "7days", label: "1 tu·∫ßn kh√¥ng h√∫t", icon: "fas fa-trophy", condition: (p) => p.daysNoSmoke >= 7 },
  { key: "30days", label: "30 ng√†y kh√¥ng h√∫t", icon: "fas fa-award", condition: (p) => p.daysNoSmoke >= 30 },
  { key: "100k", label: "Ti·∫øt ki·ªám 100K", icon: "fas fa-piggy-bank", condition: (p) => p.moneySaved >= 100000 },
  { key: "500k", label: "Ti·∫øt ki·ªám 500K", icon: "fas fa-wallet", condition: (p) => p.moneySaved >= 500000 },
  // Th√™m c√°c badge kh√°c n·∫øu mu·ªën
];

function getAchievedBadges(progress) {
  return BADGES.filter(b => b.condition(progress));
}

function shouldSendReminder(lastSent, frequency) {
  const now = new Date();
  if (!lastSent) return true;
  const last = new Date(lastSent);
  if (frequency === "daily") {
    return now.toDateString() !== last.toDateString();
  }
  if (frequency === "weekly") {
    const getWeek = d => {
      d = new Date(d);
      d.setHours(0, 0, 0, 0);
      d.setDate(d.getDate() - d.getDay() + 1);
      return d;
    };
    return getWeek(now).getTime() !== getWeek(last).getTime();
  }
  if (frequency === "monthly") {
    return now.getMonth() !== last.getMonth() || now.getFullYear() !== last.getFullYear();
  }
  return false;
}

const Dashboard = () => {
  // Th√™m state cho ti·∫øn tr√¨nh
  const [progress, setProgress] = useState(() => {
    // L·∫•y t·ª´ localStorage n·∫øu c√≥
    const saved = localStorage.getItem("quitProgress");
    return saved
      ? JSON.parse(saved)
      : { startDate: null, daysNoSmoke: 0, moneySaved: 0, health: 0 };
  });
  const [todayCigarettes, setTodayCigarettes] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [activeTab, setActiveTab] = useState("overview");
  const [journal, setJournal] = useState(() => {
    return JSON.parse(localStorage.getItem("quitJournal") || "[]");
  });
  const [journalEntry, setJournalEntry] = useState("");
  const [journalDate, setJournalDate] = useState(() => {
    // M·∫∑c ƒë·ªãnh l√† h√¥m nay
    return new Date().toISOString().slice(0, 10);
  });
  const [frequency, setFrequency] = useState(() => localStorage.getItem("smokeFrequency") || "");
  const [pricePerPack, setPricePerPack] = useState(() => localStorage.getItem("pricePerPack") || "");
  const [comments, setComments] = useState(() => JSON.parse(localStorage.getItem("badgeComments") || "{}"));

  // H√†m ghi nh·∫≠n ti·∫øn tr√¨nh m·ªói ng√†y
  const handleSubmitProgress = (e) => {
    e.preventDefault();
    localStorage.setItem("smokeFrequency", frequency);
    localStorage.setItem("pricePerPack", pricePerPack);
    const now = new Date();
    let startDate = progress.startDate
      ? new Date(progress.startDate)
      : now;
    if (!progress.startDate) startDate = now;
    // Gi·∫£ s·ª≠ m·ªói ng√†y kh√¥ng h√∫t ti·∫øt ki·ªám 70.000ƒë, c·∫£i thi·ªán 2% s·ª©c kh·ªèe
    const daysNoSmoke =
      todayCigarettes === "0"
        ? Math.floor((now - new Date(startDate)) / (1000 * 60 * 60 * 24)) + 1
        : 0;
    const moneySaved = daysNoSmoke * 70000;
    const health = Math.min(daysNoSmoke * 2, 100);
    const newProgress = {
      startDate: startDate.toISOString(),
      daysNoSmoke,
      moneySaved,
      health,
    };
    setProgress(newProgress);
    localStorage.setItem("quitProgress", JSON.stringify(newProgress));
    setShowForm(false);
    setTodayCigarettes("");
  };

  // H√†m l∆∞u nh·∫≠t k√Ω
  const handleJournalSubmit = (e) => {
    e.preventDefault();
    if (!journalEntry.trim()) return;
    const newEntry = {
      date: journalDate,
      content: journalEntry,
    };
    const updatedJournal = [...journal, newEntry];
    setJournal(updatedJournal);
    localStorage.setItem("quitJournal", JSON.stringify(updatedJournal));
    setJournalEntry("");
    toast.success("ƒê√£ l∆∞u nh·∫≠t k√Ω!");
  };

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh (s·ªë ng√†y kh√¥ng h√∫t li√™n t·ª•c)
  const chartLabels = journal.map(j => j.date);
  const chartData = journal.map((j, idx) => idx + 1);

  // Th√¥ng b√°o m·ªói ng√†y 1 l·∫ßn
  useEffect(() => {
    const lastNotify = localStorage.getItem("lastMotivationNotify");
    const today = new Date().toISOString().slice(0, 10);
    if (lastNotify !== today) {
      toast.info("H√£y nh·ªõ l√Ω do b·∫°n b·∫Øt ƒë·∫ßu! M·ªói ng√†y kh√¥ng thu·ªëc l√° l√† m·ªôt chi·∫øn th·∫Øng m·ªõi üí™");
      localStorage.setItem("lastMotivationNotify", today);
    }
  }, []);
  // Th√¥ng b√°o khi ƒë·∫°t badge m·ªõi
  useEffect(() => {
    const achieved = getAchievedBadges(progress);
    const shown = JSON.parse(localStorage.getItem("shownBadges") || "[]");
    achieved.forEach(badge => {
      if (!shown.includes(badge.key)) {
        toast.success(`Ch√∫c m·ª´ng! B·∫°n v·ª´a ƒë·∫°t huy hi·ªáu: ${badge.label}`);
        shown.push(badge.key);
      }
    });
    localStorage.setItem("shownBadges", JSON.stringify(shown));
  }, [progress]);

  // Th√¥ng b√°o ƒë·ªông vi√™n c√° nh√¢n
  useEffect(() => {
    // L·∫•y k·∫ø ho·∫°ch t·ª´ localStorage
    const plan = JSON.parse(localStorage.getItem("quitPlan") || "{}");
    const reason = plan.reason || "H√£y nh·ªõ l√Ω do b·∫°n b·∫Øt ƒë·∫ßu!";
    const frequency = plan.reminderFrequency || "daily";
    const lastNotify = localStorage.getItem("lastPersonalReasonNotify");
    if (shouldSendReminder(lastNotify, frequency)) {
      toast.info(`ƒê·ªông vi√™n: ${reason}`);
      localStorage.setItem("lastPersonalReasonNotify", new Date().toISOString());
    }
  }, []);

  // Chia s·∫ª huy hi·ªáu
  function shareBadge(badge) {
    const shared = JSON.parse(localStorage.getItem("sharedBadges") || "[]");
    shared.push({
      badge: badge.label,
      user: progress.displayName || "B·∫°n",
      time: new Date().toLocaleString(),
    });
    localStorage.setItem("sharedBadges", JSON.stringify(shared));
    toast.info(`B·∫°n ƒë√£ chia s·∫ª huy hi·ªáu "${badge.label}" l√™n c·ªông ƒë·ªìng!`);
  }

  // Th√™m c√°c state v√† h√†m x·ª≠ l√Ω ƒë·ªông vi√™n, b√¨nh lu·∫≠n
  const [forceUpdate, setForceUpdate] = useState(0);
  const [commentInputs, setCommentInputs] = useState({});
  const [encourages, setEncourages] = useState(() => JSON.parse(localStorage.getItem("encourages") || "{}"));

  function handleEncourage(idx) {
    const encouragesObj = JSON.parse(localStorage.getItem("encourages") || "{}");
    encouragesObj[idx] = (encouragesObj[idx] || 0) + 1;
    localStorage.setItem("encourages", JSON.stringify(encouragesObj));
    setEncourages(encouragesObj); // c·∫≠p nh·∫≠t state encourages
    toast.success("B·∫°n ƒë√£ ƒë·ªông vi√™n th√†nh c√¥ng!");
    setForceUpdate(f => f + 1);
  }

  function handleAddComment(idx, comment) {
    const commentsObj = JSON.parse(localStorage.getItem("badgeComments") || "{}");
    if (!commentsObj[idx]) commentsObj[idx] = [];
    commentsObj[idx].push({ text: comment, time: new Date().toLocaleString() });
    localStorage.setItem("badgeComments", JSON.stringify(commentsObj));
    setComments(commentsObj); // c·∫≠p nh·∫≠t state comments
    setForceUpdate(f => f + 1);
  }

  const communityAvg = {
    daysNoSmoke: 18,
    moneySaved: 1260000,
    health: 36,
  };

  function exportCSV() {
     if (journal.length === 0) {
      toast.info("Ch∆∞a c√≥ nh·∫≠t k√Ω ƒë·ªÉ xu·∫•t!");
      return;
    }
    const rows = [
      ["Ng√†y", "N·ªôi dung nh·∫≠t k√Ω"],
      ...journal.map(j => [j.date, j.content.replace(/\n/g, " ")]),
    ];
    const csv = rows.map(r => r.map(x => `"${x}"`).join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    saveAs(blob, "nhat-ky-cai-thuoc.csv");
  }

  useEffect(() => {
    const onStorage = (e) => {
      if (e.key === "quitProgress") {
        setProgress(JSON.parse(e.newValue || '{"startDate":null,"daysNoSmoke":0,"moneySaved":0,"health":0}'));
      }
      if (e.key === "encourages") {
        setEncourages(JSON.parse(e.newValue || "{}"));
      }
      if (e.key === "badgeComments") {
        setComments(JSON.parse(e.newValue || "{}"));
      }
    };
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  return (
    <div className="bg-white py-5">
      <div className="container">
        <div className="text-center mb-5">
          <h2 className="text-primary text-uppercase fw-semibold fs-6">Dashboard c√° nh√¢n</h2>
          <p className="mt-2 display-6 fw-bold text-dark">
            Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n
          </p>
        </div>
        <div className="bg-white shadow rounded-4 overflow-hidden">
          {/* Tabs */}
          <ul className="nav nav-tabs px-3 pt-3">
            <li className="nav-item">
              <button className={`nav-link ${activeTab === "overview" ? "active" : ""}`} onClick={() => setActiveTab("overview")}>
                <i className="fas fa-chart-pie me-2"></i>T·ªïng quan
              </button>
            </li>
            <li className="nav-item">
              <button className={`nav-link ${activeTab === "plan" ? "active" : ""}`} onClick={() => setActiveTab("plan")}>
                <i className="fas fa-calendar-alt me-2"></i>K·∫ø ho·∫°ch
              </button>
            </li>
            <li className="nav-item">
              <button className={`nav-link ${activeTab === "journal" ? "active" : ""}`} onClick={() => setActiveTab("journal")}>
                <i className="fas fa-history me-2"></i>Nh·∫≠t k√Ω
              </button>
            </li>
            <li className="nav-item">
              <button className={`nav-link ${activeTab === "achievements" ? "active" : ""}`} onClick={() => setActiveTab("achievements")}>
                <i className="fas fa-award me-2"></i>Th√†nh t√≠ch
              </button>
            </li>
            <li className="nav-item">
              <button className={`nav-link ${activeTab === "report" ? "active" : ""}`} onClick={() => setActiveTab("report")}>
                <i className="fas fa-chart-bar me-2"></i>B√°o c√°o n√¢ng cao
              </button>
            </li>
          </ul>
          <div className="p-4">
            {activeTab === "overview" && (
              <div>

                {/* Stats */}
                <div className="row g-4 mb-4">
                  <div className="col-md-3">
                    <div className="bg-primary bg-opacity-10 p-3 rounded-3 shadow-sm d-flex align-items-center">
                      <div className="bg-primary bg-opacity-25 rounded-circle p-3 text-primary">
                        <i className="fas fa-calendar-check"></i>
                      </div>
                      <div className="ms-3">
                        <div className="small text-secondary">S·ªë ng√†y kh√¥ng h√∫t</div>
                        <div className="h4 fw-bold text-primary mb-0">
                          {progress.daysNoSmoke} ng√†y
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-3">
                    <div className="bg-success bg-opacity-10 p-3 rounded-3 shadow-sm d-flex align-items-center">
                      <div className="bg-success bg-opacity-25 rounded-circle p-3 text-success">
                        <i className="fas fa-wallet"></i>
                      </div>
                      <div className="ms-3">
                        <div className="small text-secondary">Ti·ªÅn ti·∫øt ki·ªám</div>
                        <div className="h4 fw-bold text-success mb-0">
                          {progress.moneySaved.toLocaleString()}ƒë
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-3">
                    <div className="bg-info bg-opacity-10 p-3 rounded-3 shadow-sm d-flex align-items-center">
                      <div className="bg-info bg-opacity-25 rounded-circle p-3 text-info">
                        <i className="fas fa-heartbeat"></i>
                      </div>
                      <div className="ms-3">
                        <div className="small text-secondary">C·∫£i thi·ªán s·ª©c kh·ªèe</div>
                        <div className="h4 fw-bold text-info mb-0">
                          {progress.health}%
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Progress & Goal */}
                <div className="row g-4">
                  <div className="col-md-8">
                    <div className="bg-white p-4 rounded-3 shadow-sm border mb-4 mb-md-0">
                      <h3 className="fs-5 fw-semibold mb-3">Ti·∫øn tr√¨nh cai thu·ªëc</h3>
                      <div className="d-flex align-items-center justify-content-center" style={{height: "250px", background: "#f5f6fa", borderRadius: "1rem"}}>
                        <span className="text-secondary">Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y</span>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-4">
                    <div className="bg-white p-4 rounded-3 shadow-sm border text-center">
                      <h3 className="fs-5 fw-semibold mb-3">M·ª•c ti√™u hi·ªán t·∫°i</h3>
                      <div className="position-relative mx-auto mb-3" style={{width: "160px", height: "160px"}}>
                        <svg width="160" height="160" viewBox="0 0 100 100">
                          <circle stroke="#e9ecef" strokeWidth="10" fill="transparent" r="40" cx="50" cy="50" />
                          <circle stroke="#0d6efd" strokeWidth="10" strokeLinecap="round" fill="transparent" r="40" cx="50" cy="50" strokeDasharray="251.2" strokeDashoffset="100.48" />
                        </svg>
                        <div className="position-absolute top-50 start-50 translate-middle">
                          <span className="h3 fw-bold text-primary">60%</span>
                        </div>
                      </div>
                      <p className="text-secondary">B·∫°n ƒë√£ ho√†n th√†nh 60% m·ª•c ti√™u 60 ng√†y kh√¥ng thu·ªëc l√°</p>
                      <button className="btn btn-primary mt-3" onClick={() => setShowForm(!showForm)}>
                        {showForm ? "ƒê√≥ng" : "C·∫≠p nh·∫≠t ti·∫øn tr√¨nh"}
                      </button>
                      {showForm && (
                        <form onSubmit={handleSubmitProgress}>
                          <label>
                            S·ªë ƒëi·∫øu thu·ªëc h√∫t h√¥m nay:
                            <input
                              type="number"
                              min="0"
                              value={todayCigarettes}
                              onChange={(e) => setTodayCigarettes(e.target.value)}
                              required
                              style={{ marginLeft: 8, width: 60 }}
                            />
                          </label>
                          <div>
                            <label>
                              T·∫ßn su·∫•t h√∫t/ng√†y:&nbsp;
                              <input
                                type="number"
                                min="1"
                                value={frequency}
                                onChange={e => setFrequency(e.target.value)}
                                required
                              />
                              &nbsp;ƒëi·∫øu/ng√†y
                            </label>
                          </div>
                          <div>
                            <label>
                              Gi√° ti·ªÅn/bao:&nbsp;
                              <input
                                type="number"
                                min="1000"
                                step="1000"
                                value={pricePerPack}
                                onChange={e => setPricePerPack(e.target.value)}
                                required
                              />
                              &nbsp;VNƒê/bao
                            </label>
                          </div>
                          <button type="submit" className="btn btn-success ms-3">
                            Ghi nh·∫≠n
                          </button>
                        </form>
                      )}
                    </div>
                  </div>
                </div>

                {/* Recent Achievements */}
                <div className="mt-5">
                  <h3 className="fs-5 fw-semibold mb-3">Th√†nh t√≠ch g·∫ßn ƒë√¢y</h3>
                  <div className="row g-3">
                    {getAchievedBadges(progress).map((badge, idx) => (
                      <div className="col-6 col-sm-4 col-md-2" key={badge.key}>
                        <div className="bg-warning bg-opacity-10 p-3 rounded-3 shadow-sm text-center">
                          <div className="bg-warning bg-opacity-25 rounded-circle d-flex align-items-center justify-content-center mx-auto mb-2" style={{width: "48px", height: "48px"}}>
                            <i className={`${badge.icon} text-warning fs-4`}></i>
                          </div>
                          <div className="small fw-medium">{badge.label}</div>
                          <button className="btn btn-link btn-sm mt-2" onClick={() => shareBadge(badge)}>
                            Chia s·∫ª
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* B·∫£ng tin c·ªông ƒë·ªìng */}
                <div className="mt-5">
                  <h4>B·∫£ng tin c·ªông ƒë·ªìng</h4>
                  {(JSON.parse(localStorage.getItem("sharedBadges") || "[]")).reverse().map((item, idx) => {
                    const encourages = JSON.parse(localStorage.getItem("encourages") || "{}");
                    const comments = JSON.parse(localStorage.getItem("badgeComments") || "{}");
                    return (
                      <div key={idx} className="border rounded p-2 mb-2 bg-light">
                        <b>{item.user}</b> ƒë√£ chia s·∫ª huy hi·ªáu <span className="text-primary">{item.badge}</span> l√∫c {item.time}
                        <button
                          className="btn btn-sm btn-outline-success ms-2"
                          onClick={() => handleEncourage(idx)}
                        >
                          ƒê·ªông vi√™n
                        </button>
                        <span className="ms-2 text-success">
                          {encourages[idx] ? `${encourages[idx]} l∆∞·ª£t ƒë·ªông vi√™n` : ""}
                        </span>
                        {/* Form b√¨nh lu·∫≠n */}
                        <div className="mt-2">
                          <input
                            type="text"
                            placeholder="Vi·∫øt b√¨nh lu·∫≠n..."
                            value={commentInputs[idx] || ""}
                            onChange={e => setCommentInputs({ ...commentInputs, [idx]: e.target.value })}
                            style={{ width: "70%", marginRight: 8 }}
                          />
                          <button
                            className="btn btn-sm btn-primary"
                            aria-label="G·ª≠i b√¨nh lu·∫≠n"
                            onClick={() => {
                              if ((commentInputs[idx] || "").trim()) {
                                handleAddComment(idx, commentInputs[idx]);
                                setCommentInputs({ ...commentInputs, [idx]: "" });
                              }
                            }}
                          >
                            G·ª≠i
                          </button>
                        </div>
                        {/* Hi·ªÉn th·ªã b√¨nh lu·∫≠n */}
                        <div className="mt-2">
                          {(comments[idx] || []).map((c, i) => (
                            <div key={i} style={{ fontSize: 14, marginBottom: 2 }}>
                              <b>Th√†nh vi√™n:</b> {c.text} <span className="text-secondary" style={{ fontSize: 12 }}>({c.time})</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Motivation */}
                <div className="mt-5 bg-light p-4 rounded-3 shadow-sm">
                  <div className="d-flex align-items-start">
                    <div className="bg-primary rounded-circle p-3 text-white me-3 d-flex align-items-center justify-content-center" style={{width: "48px", height: "48px"}}>
                      <i className="fas fa-lightbulb fs-4"></i>
                    </div>
                    <div>
                      <h3 className="fs-5 fw-semibold mb-2">Th√¥ng ƒëi·ªáp ƒë·ªông vi√™n</h3>
                      <p className="mb-1 text-secondary">H√¥m nay l√† ng√†y th·ª© 34 kh√¥ng h√∫t thu·ªëc c·ªßa b·∫°n! H√£y nh·ªõ r·∫±ng m·ªói ng√†y kh√¥ng thu·ªëc l√° l√† m·ªôt chi·∫øn th·∫Øng. B·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c 2,380,000ƒë v√† tr√°nh ƒë∆∞·ª£c 476 ƒëi·∫øu thu·ªëc.</p>
                      <p className="mb-0 text-secondary">Ti·∫øp t·ª•c ph√°t huy! S·ª©c kh·ªèe c·ªßa b·∫°n ƒë√£ c·∫£i thi·ªán ƒë√°ng k·ªÉ sau khi b·ªè thu·ªëc.</p>
                    </div>
                  </div>
                </div>

                {/* Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh */}
                <div className="my-4">
                  <h4>Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh</h4>
                  <Line
                    key={chartLabels.join(",")}
                    data={{
                      labels: chartLabels.length > 0 ? chartLabels : ["Ng√†y 1"],
                      datasets: [
                        {
                          label: "S·ªë ng√†y kh√¥ng h√∫t (theo nh·∫≠t k√Ω)",
                          data: chartData.length > 0 ? chartData : [0],
                          fill: false,
                          borderColor: "#1976d2",
                          tension: 0.1,
                        },
                      ],
                    }}
                    height={120}
                  />
                </div>
              </div>
            )}
            {activeTab === "plan" && (
              <div>
                <h3 className="fs-5 fw-semibold mb-3">K·∫ø ho·∫°ch cai thu·ªëc</h3>
                <ul>
                  <li>ƒê·∫∑t m·ª•c ti√™u s·ªë ng√†y kh√¥ng h√∫t thu·ªëc</li>
                  <li>Chia nh·ªè m·ª•c ti√™u th√†nh c√°c giai ƒëo·∫°n (1 ng√†y, 1 tu·∫ßn, 1 th√°ng...)</li>
                  <li>Nh·∫≠n nh·∫Øc nh·ªü v√† ƒë·ªông vi√™n t·ª± ƒë·ªông</li>
                </ul>
                <p className="text-secondary">B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t m·ª•c ti√™u m·ªõi b·∫•t c·ª© l√∫c n√†o.</p>
              </div>
            )}
            {activeTab === "journal" && (
              <div>
                <h3 className="fs-5 fw-semibold mb-3">Nh·∫≠t k√Ω cai thu·ªëc</h3>
                <p className="text-secondary">
                  Ghi l·∫°i c·∫£m x√∫c, kh√≥ khƒÉn, th√†nh c√¥ng m·ªói ng√†y ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh v√† nh·∫≠n l·ªùi khuy√™n ph√π h·ª£p.
                </p>

                {/* Form nh·∫≠p nh·∫≠t k√Ω */}
                <form onSubmit={handleJournalSubmit} className="mb-4">
                  <div className="mb-2">
                    <label>
                      Ng√†y:&nbsp;
                      <input
                        type="date"
                        value={journalDate}
                        onChange={e => setJournalDate(e.target.value)}
                        required
                        style={{ borderRadius: 6, border: "1px solid #ccc", padding: "4px 8px" }}
                      />
                    </label>
                  </div>
                  <textarea
                    className="form-control mb-2"
                    rows={3}
                    placeholder="Nh·∫≠p c·∫£m x√∫c, kh√≥ khƒÉn ho·∫∑c th√†nh c√¥ng h√¥m nay..."
                    value={journalEntry}
                    onChange={e => setJournalEntry(e.target.value)}
                    required
                  />
                  <button type="submit" className="btn btn-primary">
                    L∆∞u nh·∫≠t k√Ω
                  </button>
                </form>

                {/* Hi·ªÉn th·ªã danh s√°ch nh·∫≠t k√Ω */}
                <div>
                  <h5 className="mb-3">L·ªãch s·ª≠ nh·∫≠t k√Ω</h5>
                  {journal.length === 0 && <div className="text-secondary">Ch∆∞a c√≥ nh·∫≠t k√Ω n√†o.</div>}
                  {journal.slice().reverse().map((entry, idx) => (
                    <div key={idx} className="border rounded p-2 mb-2 bg-light">
                      <b>{entry.date}</b>: {entry.content}
                    </div>
                  ))}
                </div>
                
                {/* Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh theo nh·∫≠t k√Ω */}
                <div className="my-4">
                  <h5>Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh (theo nh·∫≠t k√Ω)</h5>
                  <Line
                    key={chartLabels.join(",")} // Th√™m prop key ƒë·ªÉ tr√°nh l·ªói canvas
                    data={{
                      labels: chartLabels.length > 0 ? chartLabels : ["Ng√†y 1"],
                      datasets: [
                        {
                          label: "S·ªë ng√†y ghi nh·∫≠t k√Ω",
                          data: chartData.length > 0 ? chartData : [0],
                          fill: false,
                          borderColor: "#43a047",
                          tension: 0.1,
                        },
                      ],
                    }}
                    height={120}
                  />
                </div>
              </div>
            )}
            {activeTab === "achievements" && (
              <div>
                <h3 className="fs-5 fw-semibold mb-3">Th√†nh t√≠ch & Huy hi·ªáu</h3>
                <div className="row g-3">
                  {getAchievedBadges(progress).map((badge, idx) => (
                    <div className="col-6 col-sm-4 col-md-2" key={badge.key}>
                      <div className="bg-warning bg-opacity-10 p-3 rounded-3 shadow-sm text-center">
                        <div className="bg-warning bg-opacity-25 rounded-circle d-flex align-items-center justify-content-center mx-auto mb-2" style={{width: "48px", height: "48px"}}>
                          <i className={`${badge.icon} text-warning fs-4`}></i>
                        </div>
                        <div className="small fw-medium">{badge.label}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            {activeTab === "report" && (
              <div>
                <h3 className="fs-5 fw-semibold mb-3">B√°o c√°o n√¢ng cao</h3>
                <div className="row">
                  <div className="col-md-6">
                    <h5>Xu h∆∞·ªõng ti·∫øn tr√¨nh</h5>
                    <Line
                      data={{
                        labels: chartLabels.length > 0 ? chartLabels : ["Ng√†y 1"],
                        datasets: [
                          {
                            label: "S·ªë ng√†y kh√¥ng h√∫t (c·ªông d·ªìn)",
                            data: chartData.length > 0 ? chartData : [0],
                            fill: false,
                            borderColor: "#1976d2",
                            tension: 0.1,
                          },
                          {
                            label: "Trung b√¨nh c·ªông ƒë·ªìng",
                            data: chartLabels.map(() => communityAvg.daysNoSmoke),
                            borderDash: [5, 5],
                            borderColor: "#aaa",
                            fill: false,
                          },
                        ],
                      }}
                      height={120}
                    />
                  </div>
                  <div className="col-md-6">
                    <h5>So s√°nh v·ªõi c·ªông ƒë·ªìng</h5>
                    <ul>
                      <li>S·ªë ng√†y kh√¥ng h√∫t: <b>{progress.daysNoSmoke}</b> (C·ªông ƒë·ªìng: {communityAvg.daysNoSmoke})</li>
                      <li>Ti·ªÅn ti·∫øt ki·ªám: <b>{progress.moneySaved.toLocaleString()}ƒë</b> (C·ªông ƒë·ªìng: {communityAvg.moneySaved.toLocaleString()}ƒë)</li>
                      <li>C·∫£i thi·ªán s·ª©c kh·ªèe: <b>{progress.health}%</b> (C·ªông ƒë·ªìng: {communityAvg.health}%)</li>
                    </ul>
                    <button className="btn btn-outline-primary mt-3" onClick={exportCSV}>
                      <i className="fas fa-file-csv me-2"></i>Xu·∫•t nh·∫≠t k√Ω CSV
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;