import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Button, 
  TextField,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Switch,
  FormControlLabel,
  Chip
} from '@mui/material';
import { 
  Notifications as NotificationsIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Schedule as ScheduleIcon 
} from '@mui/icons-material';
import { toast } from 'react-toastify';

const NOTIFICATION_TYPES = {
  MOTIVATION: 'motivation',
  REMINDER: 'reminder',
  ACHIEVEMENT: 'achievement',
  HEALTH: 'health',
  MILESTONE: 'milestone'
};

const FREQUENCY_OPTIONS = [
  { value: 'once', label: 'M·ªôt l·∫ßn' },
  { value: 'daily', label: 'H√†ng ng√†y' },
  { value: 'weekly', label: 'H√†ng tu·∫ßn' },
  { value: 'monthly', label: 'H√†ng th√°ng' }
];

const MOTIVATION_MESSAGES = [
  "B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c ph·∫•n ƒë·∫•u! üí™",
  "M·ªói ng√†y kh√¥ng thu·ªëc l√° l√† m·ªôt chi·∫øn th·∫Øng! üèÜ",
  "H√£y nh·ªõ l√Ω do b·∫°n b·∫Øt ƒë·∫ßu h√†nh tr√¨nh n√†y! ‚ù§Ô∏è",
  "S·ª©c kh·ªèe c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c c·∫£i thi·ªán t·ª´ng ng√†y! üåü",
  "B·∫°n m·∫°nh m·∫Ω h∆°n c∆°n th√®m thu·ªëc! üíØ",
  "Ti·ªÅn b·∫°n ti·∫øt ki·ªám c√≥ th·ªÉ mua nh·ªØng th·ª© √Ω nghƒ©a h∆°n! üí∞",
  "Gia ƒë√¨nh v√† b·∫°n b√® ƒëang t·ª± h√†o v·ªÅ b·∫°n! üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
];

const HEALTH_TIPS = [
  "U·ªëng nhi·ªÅu n∆∞·ªõc ƒë·ªÉ gi·∫£i ƒë·ªôc c∆° th·ªÉ",
  "T·∫≠p th·ªÉ d·ª•c ƒë·ªÉ gi·∫£m cƒÉng th·∫≥ng",
  "ƒÇn nhi·ªÅu rau xanh v√† tr√°i c√¢y",
  "Ng·ªß ƒë·ªß gi·∫•c ƒë·ªÉ ph·ª•c h·ªìi s·ª©c kh·ªèe",
  "Th·ª±c hi·ªán b√†i t·∫≠p th·ªü s√¢u khi th√®m thu·ªëc"
];

export default function NotificationSystem() {
  const [notifications, setNotifications] = useState(() => {
    const saved = localStorage.getItem('customNotifications');
    return saved ? JSON.parse(saved) : [];
  });

  const [notificationHistory, setNotificationHistory] = useState(() => {
    const saved = localStorage.getItem('notificationHistory');
    return saved ? JSON.parse(saved) : [];
  });

  const [openDialog, setOpenDialog] = useState(false);
  const [editingNotification, setEditingNotification] = useState(null);
  const [newNotification, setNewNotification] = useState({
    title: '',
    message: '',
    type: NOTIFICATION_TYPES.MOTIVATION,
    frequency: 'daily',
    time: '09:00',
    isActive: true,
    days: [], // for weekly notifications
    date: '', // for one-time notifications
    customReason: '' // personal motivation
  });

  const [settings, setSettings] = useState(() => {
    const saved = localStorage.getItem('notificationSettings');
    return saved ? JSON.parse(saved) : {
      enableBrowserNotifications: true,
      enableMotivationMessages: true,
      enableHealthTips: true,
      enableMilestoneNotifications: true,
      morningTime: '08:00',
      eveningTime: '20:00'
    };
  });

  useEffect(() => {
    localStorage.setItem('customNotifications', JSON.stringify(notifications));
  }, [notifications]);

  useEffect(() => {
    localStorage.setItem('notificationSettings', JSON.stringify(settings));
  }, [settings]);

  useEffect(() => {
    localStorage.setItem('notificationHistory', JSON.stringify(notificationHistory));
  }, [notificationHistory]);

  // Request notification permission
  useEffect(() => {
    if (settings.enableBrowserNotifications && 'Notification' in window) {
      if (Notification.permission === 'default') {
        Notification.requestPermission();
      }
    }
  }, [settings.enableBrowserNotifications]);

  // Set up notification intervals
  useEffect(() => {
    const intervals = [];

    notifications.forEach(notification => {
      if (!notification.isActive) return;

      const now = new Date();
      const [hours, minutes] = notification.time.split(':');
      const scheduledTime = new Date();
      scheduledTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);

      if (scheduledTime <= now) {
        scheduledTime.setDate(scheduledTime.getDate() + 1);
      }

      const timeUntilNotification = scheduledTime.getTime() - now.getTime();

      if (notification.frequency === 'daily') {
        const interval = setInterval(() => {
          sendNotification(notification);
          logNotification(notification);
        }, 24 * 60 * 60 * 1000); // 24 hours

        // Send first notification
        setTimeout(() => {
          sendNotification(notification);
          logNotification(notification);
        }, timeUntilNotification);

        intervals.push(interval);
      } else if (notification.frequency === 'weekly') {
        // Weekly notifications logic
        const interval = setInterval(() => {
          const today = new Date().getDay();
          if (notification.days.includes(today)) {
            sendNotification(notification);
            logNotification(notification);
          }
        }, 24 * 60 * 60 * 1000);

        intervals.push(interval);
      }
    });

    return () => {
      intervals.forEach(interval => clearInterval(interval));
    };
  }, [notifications]);

  const sendNotification = (notification) => {
    if (settings.enableBrowserNotifications && 'Notification' in window && Notification.permission === 'granted') {
      new Notification(notification.title, {
        body: notification.message,
        icon: '/favicon.ico'
      });
    }
    toast.info(`${notification.title}: ${notification.message}`);
  };

  const logNotification = (notification) => {
    const log = {
      id: Date.now(),
      title: notification.title,
      message: notification.message,
      type: notification.type,
      timestamp: new Date().toISOString(),
      read: false
    };
    setNotificationHistory(prev => [log, ...prev.slice(0, 49)]); // Keep last 50
  };

  const handleSaveNotification = () => {
    if (!newNotification.title.trim() || !newNotification.message.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung!');
      return;
    }

    const notification = {
      ...newNotification,
      id: editingNotification?.id || Date.now(),
      createdAt: editingNotification?.createdAt || new Date().toISOString()
    };

    if (editingNotification) {
      setNotifications(prev => 
        prev.map(n => n.id === editingNotification.id ? notification : n)
      );
      toast.success('ƒê√£ c·∫≠p nh·∫≠t th√¥ng b√°o!');
    } else {
      setNotifications(prev => [...prev, notification]);
      toast.success('ƒê√£ t·∫°o th√¥ng b√°o m·ªõi!');
    }

    setNewNotification({
      title: '',
      message: '',
      type: NOTIFICATION_TYPES.MOTIVATION,
      frequency: 'daily',
      time: '09:00',
      isActive: true,
      days: [],
      date: '',
      customReason: ''
    });
    setEditingNotification(null);
    setOpenDialog(false);
  };

  const handleEditNotification = (notification) => {
    setNewNotification(notification);
    setEditingNotification(notification);
    setOpenDialog(true);
  };

  const handleDeleteNotification = (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) {
      setNotifications(prev => prev.filter(n => n.id !== id));
      toast.success('ƒê√£ x√≥a th√¥ng b√°o!');
    }
  };

  const generateMotivationMessage = () => {
    const userPlan = JSON.parse(localStorage.getItem('quitPlan') || '{}');
    const progress = JSON.parse(localStorage.getItem('quitProgress') || '{}');
    
    let message = MOTIVATION_MESSAGES[Math.floor(Math.random() * MOTIVATION_MESSAGES.length)];
    
    if (userPlan.reason) {
      message += ` H√£y nh·ªõ: ${userPlan.reason}`;
    }
    
    if (progress.daysNoSmoke > 0) {
      message += ` B·∫°n ƒë√£ kh√¥ng h√∫t thu·ªëc ƒë∆∞·ª£c ${progress.daysNoSmoke} ng√†y!`;
    }
    
    return message;
  };

  const createQuickNotification = (type) => {
    let title, message;
    
    switch (type) {
      case 'motivation':
        title = 'ƒê·ªông vi√™n cai thu·ªëc';
        message = generateMotivationMessage();
        break;
      case 'health':
        title = 'L·ªùi khuy√™n s·ª©c kh·ªèe';
        message = HEALTH_TIPS[Math.floor(Math.random() * HEALTH_TIPS.length)];
        break;
      case 'reminder':
        title = 'Nh·∫Øc nh·ªü h√†ng ng√†y';
        message = 'ƒê·ª´ng qu√™n c·∫≠p nh·∫≠t ti·∫øn tr√¨nh cai thu·ªëc h√¥m nay!';
        break;
      default:
        return;
    }

    const notification = {
      id: Date.now(),
      title,
      message,
      type,
      frequency: 'daily',
      time: new Date().toTimeString().slice(0, 5),
      isActive: true,
      days: [],
      date: '',
      customReason: '',
      createdAt: new Date().toISOString()
    };

    setNotifications(prev => [...prev, notification]);
    toast.success('ƒê√£ t·∫°o th√¥ng b√°o nhanh!');
  };

  const markAsRead = (id) => {
    setNotificationHistory(prev => 
      prev.map(n => n.id === id ? { ...n, read: true } : n)
    );
  };

  const unreadCount = notificationHistory.filter(n => !n.read).length;

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" gutterBottom fontWeight="bold">
        H·ªá th·ªëng th√¥ng b√°o th√¥ng minh
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        T·∫°o v√† qu·∫£n l√Ω th√¥ng b√°o nh·∫Øc nh·ªü, ƒë·ªông vi√™n ƒë·ªÉ h·ªó tr·ª£ h√†nh tr√¨nh cai thu·ªëc c·ªßa b·∫°n.
      </Typography>

      <Grid container spacing={3}>
        {/* Quick Actions */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              T·∫°o nhanh th√¥ng b√°o
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Button 
                variant="outlined" 
                onClick={() => createQuickNotification('motivation')}
                startIcon={<NotificationsIcon />}
              >
                ƒê·ªông vi√™n
              </Button>
              <Button 
                variant="outlined" 
                onClick={() => createQuickNotification('health')}
                startIcon={<NotificationsIcon />}
              >
                S·ª©c kh·ªèe
              </Button>
              <Button 
                variant="outlined" 
                onClick={() => createQuickNotification('reminder')}
                startIcon={<NotificationsIcon />}
              >
                Nh·∫Øc nh·ªü
              </Button>
              <Button 
                variant="contained" 
                onClick={() => setOpenDialog(true)}
                startIcon={<NotificationsIcon />}
              >
                T·∫°o th√¥ng b√°o t√πy ch·ªânh
              </Button>
            </Box>
          </Paper>
        </Grid>

        {/* Settings */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              C√†i ƒë·∫∑t th√¥ng b√°o
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enableBrowserNotifications}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      enableBrowserNotifications: e.target.checked
                    }))}
                  />
                }
                label="B·∫≠t th√¥ng b√°o tr√¨nh duy·ªát"
              />
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enableMotivationMessages}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      enableMotivationMessages: e.target.checked
                    }))}
                  />
                }
                label="Tin nh·∫Øn ƒë·ªông vi√™n"
              />
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enableHealthTips}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      enableHealthTips: e.target.checked
                    }))}
                  />
                }
                label="L·ªùi khuy√™n s·ª©c kh·ªèe"
              />
              <FormControlLabel
                control={
                  <Switch
                    checked={settings.enableMilestoneNotifications}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      enableMilestoneNotifications: e.target.checked
                    }))}
                  />
                }
                label="Th√¥ng b√°o c·ªôt m·ªëc"
              />
            </Box>
          </Paper>
        </Grid>

        {/* Active Notifications */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông ({notifications.filter(n => n.isActive).length})
            </Typography>
            {notifications.length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ th√¥ng b√°o n√†o ƒë∆∞·ª£c t·∫°o.</Alert>
            ) : (
              <List>
                {notifications.slice(0, 5).map((notification) => (
                  <ListItem key={notification.id} sx={{ px: 0 }}>
                    <ListItemIcon>
                      <ScheduleIcon color={notification.isActive ? 'primary' : 'disabled'} />
                    </ListItemIcon>
                    <ListItemText
                      primary={notification.title}
                      secondary={
                        <Box>
                          <Typography variant="body2" color="text.secondary">
                            {notification.message.slice(0, 50)}...
                          </Typography>
                          <Box sx={{ mt: 1 }}>
                            <Chip 
                              label={notification.frequency} 
                              size="small" 
                              sx={{ mr: 1 }} 
                            />
                            <Chip 
                              label={notification.time} 
                              size="small" 
                              variant="outlined" 
                            />
                          </Box>
                        </Box>
                      }
                    />
                    <Box>
                      <IconButton 
                        size="small" 
                        onClick={() => handleEditNotification(notification)}
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton 
                        size="small" 
                        onClick={() => handleDeleteNotification(notification.id)}
                      >
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </ListItem>
                ))}
              </List>
            )}
          </Paper>
        </Grid>

        {/* Notification History */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              L·ªãch s·ª≠ th√¥ng b√°o 
              {unreadCount > 0 && (
                <Chip label={`${unreadCount} ch∆∞a ƒë·ªçc`} color="error" size="small" sx={{ ml: 1 }} />
              )}
            </Typography>
            {notificationHistory.length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ l·ªãch s·ª≠ th√¥ng b√°o.</Alert>
            ) : (
              <List sx={{ maxHeight: 400, overflow: 'auto' }}>
                {notificationHistory.slice(0, 20).map((notification) => (
                  <ListItem 
                    key={notification.id} 
                    sx={{ 
                      px: 0,
                      backgroundColor: notification.read ? 'transparent' : 'action.hover',
                      borderRadius: 1,
                      mb: 1
                    }}
                    onClick={() => markAsRead(notification.id)}
                  >
                    <ListItemText
                      primary={notification.title}
                      secondary={
                        <Box>
                          <Typography variant="body2" color="text.secondary">
                            {notification.message}
                          </Typography>
                          <Typography variant="caption" color="text.disabled">
                            {new Date(notification.timestamp).toLocaleString('vi-VN')}
                          </Typography>
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Paper>
        </Grid>
      </Grid>

      {/* Create/Edit Notification Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editingNotification ? 'Ch·ªânh s·ª≠a th√¥ng b√°o' : 'T·∫°o th√¥ng b√°o m·ªõi'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Ti√™u ƒë·ªÅ"
                value={newNotification.title}
                onChange={(e) => setNewNotification(prev => ({ ...prev, title: e.target.value }))}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={3}
                label="N·ªôi dung th√¥ng b√°o"
                value={newNotification.message}
                onChange={(e) => setNewNotification(prev => ({ ...prev, message: e.target.value }))}
              />
            </Grid>

            <Grid item xs={6}>
              <FormControl fullWidth>
                <InputLabel>Lo·∫°i th√¥ng b√°o</InputLabel>
                <Select
                  value={newNotification.type}
                  label="Lo·∫°i th√¥ng b√°o"
                  onChange={(e) => setNewNotification(prev => ({ ...prev, type: e.target.value }))}
                >
                  <MenuItem value={NOTIFICATION_TYPES.MOTIVATION}>ƒê·ªông vi√™n</MenuItem>
                  <MenuItem value={NOTIFICATION_TYPES.REMINDER}>Nh·∫Øc nh·ªü</MenuItem>
                  <MenuItem value={NOTIFICATION_TYPES.HEALTH}>S·ª©c kh·ªèe</MenuItem>
                  <MenuItem value={NOTIFICATION_TYPES.MILESTONE}>C·ªôt m·ªëc</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={6}>
              <FormControl fullWidth>
                <InputLabel>T·∫ßn su·∫•t</InputLabel>
                <Select
                  value={newNotification.frequency}
                  label="T·∫ßn su·∫•t"
                  onChange={(e) => setNewNotification(prev => ({ ...prev, frequency: e.target.value }))}
                >
                  {FREQUENCY_OPTIONS.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                type="time"
                label="Th·ªùi gian"
                value={newNotification.time}
                onChange={(e) => setNewNotification(prev => ({ ...prev, time: e.target.value }))}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={6}>
              <FormControlLabel
                control={
                  <Switch
                    checked={newNotification.isActive}
                    onChange={(e) => setNewNotification(prev => ({ ...prev, isActive: e.target.checked }))}
                  />
                }
                label="K√≠ch ho·∫°t"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>H·ªßy</Button>
          <Button onClick={handleSaveNotification} variant="contained">
            {editingNotification ? 'C·∫≠p nh·∫≠t' : 'T·∫°o'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
