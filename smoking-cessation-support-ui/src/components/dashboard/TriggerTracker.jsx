import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Chip, 
  Button, 
  TextField,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert
} from '@mui/material';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { toast } from 'react-toastify';

const COMMON_TRIGGERS = [
  'Stress', 'C√† ph√™', 'R∆∞·ª£u bia', 'Sau ƒÉn', 'L√°i xe', 
  'C√¥ng vi·ªác', 'B·∫°n b√® h√∫t thu·ªëc', 'C√¥ ƒë∆°n', 'Bu·ªìn ch√°n', 'Gi·∫≠n d·ªØ'
];

const INTENSITY_LEVELS = [
  { value: 1, label: 'R·∫•t nh·∫π', color: '#4caf50' },
  { value: 2, label: 'Nh·∫π', color: '#8bc34a' },
  { value: 3, label: 'Trung b√¨nh', color: '#ffeb3b' },
  { value: 4, label: 'M·∫°nh', color: '#ff9800' },
  { value: 5, label: 'R·∫•t m·∫°nh', color: '#f44336' }
];

export default function TriggerTracker() {
  const [triggers, setTriggers] = useState(() => {
    const saved = localStorage.getItem('smokingTriggers');
    return saved ? JSON.parse(saved) : [];
  });
  
  const [openDialog, setOpenDialog] = useState(false);
  const [newTrigger, setNewTrigger] = useState({
    name: '',
    intensity: 1,
    description: '',
    date: new Date().toISOString().slice(0, 10),
    time: new Date().toTimeString().slice(0, 5),
    location: '',
    emotion: '',
    copingStrategy: ''
  });

  const [selectedTrigger, setSelectedTrigger] = useState('');

  useEffect(() => {
    localStorage.setItem('smokingTriggers', JSON.stringify(triggers));
  }, [triggers]);

  const handleAddTrigger = () => {
    if (!newTrigger.name.trim()) {
      toast.error('Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p t√™n trigger!');
      return;
    }

    const trigger = {
      ...newTrigger,
      id: Date.now(),
      timestamp: new Date().toISOString()
    };

    setTriggers(prev => [...prev, trigger]);
    setNewTrigger({
      name: '',
      intensity: 1,
      description: '',
      date: new Date().toISOString().slice(0, 10),
      time: new Date().toTimeString().slice(0, 5),
      location: '',
      emotion: '',
      copingStrategy: ''
    });
    setOpenDialog(false);
    toast.success('ƒê√£ ghi nh·∫≠n trigger th√†nh c√¥ng!');
  };

  const getTriggerStats = () => {
    const stats = {};
    triggers.forEach(trigger => {
      if (stats[trigger.name]) {
        stats[trigger.name].count++;
        stats[trigger.name].totalIntensity += trigger.intensity;
      } else {
        stats[trigger.name] = {
          count: 1,
          totalIntensity: trigger.intensity
        };
      }
    });
    
    return Object.entries(stats).map(([name, data]) => ({
      name,
      count: data.count,
      avgIntensity: (data.totalIntensity / data.count).toFixed(1)
    })).sort((a, b) => b.count - a.count);
  };

  const getRecentTriggers = () => {
    return triggers
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
      .slice(0, 5);
  };

  const getIntensityColor = (intensity) => {
    const level = INTENSITY_LEVELS.find(l => l.value === intensity);
    return level ? level.color : '#ccc';
  };

  const getAvoidanceStrategies = (triggerName) => {
    const strategies = {
      'Stress': [
        'Th·ª±c hi·ªán b√†i t·∫≠p th·ªü s√¢u',
        'T·∫≠p thi·ªÅn 5-10 ph√∫t',
        'ƒêi b·ªô ho·∫∑c t·∫≠p th·ªÉ d·ª•c nh·∫π',
        'Nghe nh·∫°c th∆∞ gi√£n'
      ],
      'C√† ph√™': [
        'Thay c√† ph√™ b·∫±ng tr√† th·∫£o m·ªôc',
        'U·ªëng c√† ph√™ ·ªü n∆°i kh√¥ng c√≥ kh√≥i thu·ªëc',
        'Thay ƒë·ªïi th√≥i quen u·ªëng c√† ph√™',
        'Nhai k·∫πo cao su ho·∫∑c ƒÉn k·∫πo'
      ],
      'Sau ƒÉn': [
        'ƒê√°nh rƒÉng ngay sau khi ƒÉn',
        'U·ªëng n∆∞·ªõc ho·∫∑c tr√†',
        'ƒêi b·ªô nh·∫π nh√†ng',
        'Nhai k·∫πo cao su'
      ],
      'Bu·ªìn ch√°n': [
        'T√¨m ho·∫°t ƒë·ªông th√∫ v·ªã kh√°c',
        'G·ªçi ƒëi·ªán cho b·∫°n b√®',
        'ƒê·ªçc s√°ch ho·∫∑c xem phim',
        'T·∫≠p th·ªÉ d·ª•c'
      ]
    };
    return strategies[triggerName] || [
      'Th·ª±c hi·ªán b√†i t·∫≠p th·ªü s√¢u',
      'U·ªëng n∆∞·ªõc',
      'Chuy·ªÉn h∆∞·ªõng ch√∫ √Ω',
      'T√¨m ho·∫°t ƒë·ªông thay th·∫ø'
    ];
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" gutterBottom fontWeight="bold">
        Theo d√µi Trigger - Y·∫øu t·ªë k√≠ch th√≠ch
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Ghi nh·∫≠n v√† ph√¢n t√≠ch c√°c y·∫øu t·ªë khi·∫øn b·∫°n mu·ªën h√∫t thu·ªëc ƒë·ªÉ c√≥ chi·∫øn l∆∞·ª£c ph√≤ng tr√°nh ph√π h·ª£p.
      </Typography>

      <Grid container spacing={3}>
        {/* Add Trigger Button */}
        <Grid item xs={12}>
          <Button 
            variant="contained" 
            color="primary"
            onClick={() => setOpenDialog(true)}
            sx={{ mb: 2 }}
          >
            + Ghi nh·∫≠n Trigger m·ªõi
          </Button>
        </Grid>

        {/* Recent Triggers */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Trigger g·∫ßn ƒë√¢y
            </Typography>
            {getRecentTriggers().length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ trigger n√†o ƒë∆∞·ª£c ghi nh·∫≠n.</Alert>
            ) : (
              getRecentTriggers().map((trigger) => (
                <Box key={trigger.id} sx={{ mb: 2, p: 2, border: '1px solid #eee', borderRadius: 1 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Chip 
                      label={trigger.name} 
                      color="primary" 
                      variant="outlined"
                    />
                    <Chip 
                      label={`M·ª©c ƒë·ªô: ${trigger.intensity}/5`}
                      sx={{ backgroundColor: getIntensityColor(trigger.intensity), color: 'white' }}
                      size="small"
                    />
                  </Box>
                  <Typography variant="body2" color="text.secondary">
                    {new Date(trigger.timestamp).toLocaleString('vi-VN')}
                  </Typography>
                  {trigger.location && (
                    <Typography variant="body2">üìç {trigger.location}</Typography>
                  )}
                  {trigger.emotion && (
                    <Typography variant="body2">üòä {trigger.emotion}</Typography>
                  )}
                  {trigger.description && (
                    <Typography variant="body2" sx={{ mt: 1 }}>
                      {trigger.description}
                    </Typography>
                  )}
                </Box>
              ))
            )}
          </Paper>
        </Grid>

        {/* Trigger Statistics */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Th·ªëng k√™ Trigger
            </Typography>
            {getTriggerStats().length === 0 ? (
              <Alert severity="info">Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™.</Alert>
            ) : (
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={getTriggerStats()}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill="#1976d2" name="S·ªë l·∫ßn" />
                </BarChart>
              </ResponsiveContainer>
            )}
          </Paper>
        </Grid>

        {/* Avoidance Strategies */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Chi·∫øn l∆∞·ª£c ph√≤ng tr√°nh
            </Typography>
            <FormControl sx={{ mb: 2, minWidth: 200 }}>
              <InputLabel>Ch·ªçn trigger</InputLabel>
              <Select
                value={selectedTrigger}
                label="Ch·ªçn trigger"
                onChange={(e) => setSelectedTrigger(e.target.value)}
              >
                {Array.from(new Set(triggers.map(t => t.name))).map(name => (
                  <MenuItem key={name} value={name}>{name}</MenuItem>
                ))}
                {COMMON_TRIGGERS.map(name => (
                  <MenuItem key={name} value={name}>{name}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            {selectedTrigger && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 1 }}>
                  G·ª£i √Ω cho trigger "{selectedTrigger}":
                </Typography>
                {getAvoidanceStrategies(selectedTrigger).map((strategy, index) => (
                  <Alert key={index} severity="success" sx={{ mb: 1 }}>
                    {strategy}
                  </Alert>
                ))}
              </Box>
            )}
          </Paper>
        </Grid>
      </Grid>

      {/* Add Trigger Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Ghi nh·∫≠n Trigger m·ªõi</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Ch·ªçn trigger</InputLabel>
                <Select
                  value={newTrigger.name}
                  label="Ch·ªçn trigger"
                  onChange={(e) => setNewTrigger(prev => ({ ...prev, name: e.target.value }))}
                >
                  {COMMON_TRIGGERS.map(trigger => (
                    <MenuItem key={trigger} value={trigger}>{trigger}</MenuItem>
                  ))}
                  <MenuItem value="other">Kh√°c (nh·∫≠p th·ªß c√¥ng)</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            {newTrigger.name === 'other' && (
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="T√™n trigger"
                  value={newTrigger.name === 'other' ? '' : newTrigger.name}
                  onChange={(e) => setNewTrigger(prev => ({ ...prev, name: e.target.value }))}
                />
              </Grid>
            )}

            <Grid item xs={6}>
              <TextField
                fullWidth
                type="date"
                label="Ng√†y"
                value={newTrigger.date}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, date: e.target.value }))}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                type="time"
                label="Gi·ªù"
                value={newTrigger.time}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, time: e.target.value }))}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>M·ª©c ƒë·ªô khao kh√°t</InputLabel>
                <Select
                  value={newTrigger.intensity}
                  label="M·ª©c ƒë·ªô khao kh√°t"
                  onChange={(e) => setNewTrigger(prev => ({ ...prev, intensity: e.target.value }))}
                >
                  {INTENSITY_LEVELS.map(level => (
                    <MenuItem key={level.value} value={level.value}>
                      {level.value} - {level.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                label="ƒê·ªãa ƒëi·ªÉm"
                value={newTrigger.location}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, location: e.target.value }))}
                placeholder="V√≠ d·ª•: VƒÉn ph√≤ng, Qu√°n c√† ph√™..."
              />
            </Grid>

            <Grid item xs={6}>
              <TextField
                fullWidth
                label="C·∫£m x√∫c l√∫c ƒë√≥"
                value={newTrigger.emotion}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, emotion: e.target.value }))}
                placeholder="V√≠ d·ª•: CƒÉng th·∫≥ng, Bu·ªìn ch√°n..."
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={3}
                label="M√¥ t·∫£ chi ti·∫øt"
                value={newTrigger.description}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, description: e.target.value }))}
                placeholder="M√¥ t·∫£ t√¨nh hu·ªëng c·ª• th·ªÉ..."
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={2}
                label="Chi·∫øn l∆∞·ª£c ƒë√£ √°p d·ª•ng"
                value={newTrigger.copingStrategy}
                onChange={(e) => setNewTrigger(prev => ({ ...prev, copingStrategy: e.target.value }))}
                placeholder="B·∫°n ƒë√£ l√†m g√¨ ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi trigger n√†y?"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>H·ªßy</Button>
          <Button onClick={handleAddTrigger} variant="contained">L∆∞u</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
